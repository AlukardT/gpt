// Telegram Web App API
let tg = window.Telegram.WebApp;
tg.expand();

// –ï–î–ò–ù–´–ô –ö–ê–¢–ê–õ–û–ì –†–û–õ–ï–ô ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –¥–ª—è UI, —Ä–∞–∑–¥–∞—á–∏ –∏ –Ω–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤
const ROLES = [
    // –ö–æ–º–∞–Ω–¥–∞ –º–∞—Ñ–∏–∏
    { key:'don',          label:'–î–æ–Ω',         side:'mafia',  nightStep:'mafia',     ui:true,  defaultOn:true },
    { key:'consigliere',  label:'–ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏',  side:'mafia',  nightStep:'consigliere', ui:true, defaultOn:true, once:true },

    { key:'mafia',        label:'–ú–∞—Ñ–∏—è',       side:'mafia',  nightStep:'mafia',     ui:false }, // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ toggle

    // –ú–∏—Ä–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—ã
    { key:'sheriff',      label:'–ö–æ–º–∏—Å—Å–∞—Ä',    side:'town',   nightStep:'sheriff',   ui:true,  defaultOn:true },
    { key:'jailer',       label:'–¢—é—Ä–µ–º—â–∏–∫',    side:'town',   nightStep:'jailer',    ui:true,  defaultOn:true },
    { key:'doctor',       label:'–î–æ–∫—Ç–æ—Ä',      side:'town',   nightStep:'doctor',    ui:true,  defaultOn:true },
    { key:'lover',        label:'–õ—é–±–æ–≤–Ω–∏—Ü–∞',   side:'town',   nightStep:'lover',     ui:true,  defaultOn:false },
    { key:'bomber',       label:'–ü–æ–¥—Ä—ã–≤–Ω–∏–∫',   side:'town',   nightStep:null,        ui:true,  defaultOn:false }, // —à–∞–≥ –Ω–æ—á—å—é –Ω–µ –Ω—É–∂–µ–Ω
    { key:'maniac',       label:'–ú–∞–Ω—å—è–∫',      side:'neutral',nightStep:'maniac',    ui:true,  defaultOn:true },
    { key:'kamikaze',     label:'–ö–∞–º–∏–∫–∞–¥–∑–µ',   side:'neutral',nightStep:'kamikaze',  ui:true,  defaultOn:false, once:true },
    { key:'werewolf',     label:'–û–±–æ—Ä–æ—Ç–µ–Ω—å',   side:'neutral',nightStep:null,        ui:true,  defaultOn:false }, // –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ

    // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    { key:'civilian',     label:'–ú–∏—Ä–Ω—ã–π',      side:'town',   nightStep:null,        ui:false }
];

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –≤ –Ω–æ—á–Ω–æ–º UI)
const ROLE_BADGE = {
    mafia:'üî´', don:'üëë', consigliere:'ü§ù',
    sheriff:'üîé', doctor:'üíâ', lover:'üíã', maniac:'üî™',
    bomber:'üí£', kamikaze:'üí•', werewolf:'üê∫', jailer:'üîí', civilian:'‚¨úÔ∏è'
};

// Global variables
let selectedPlayerId = null;

// Game state according to new structure
let gameState = {
    id: null, // Will be set when game is created/loaded
    eventId: null,
    // Core game phases: setup, preparation, introduction, firstNight, day, voting, night, results, finished
    phase: 'setup',
    subPhase: null, // For detailed phase tracking
    dayNumber: 1,
    nightNumber: 0,
    isActive: false,
    players: [],
    gameMode: 'hidden', // hidden or open
    
    // Game progress tracking
    orderIndex: 0, // For introductions and voting order
    currentPlayerIndex: 0, // Who's currently acting
    
    // Visual voting system (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    voting: {
        isActive: false,
        order: [], // [playerId] —Å—Ç—Ä–æ–≥–æ –ø–æ –º–µ—Å—Ç–∞–º —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö
        currentVoterIdx: 0,
        votes: {}, // { voterId: targetId | 'abstain' }
        timer: {
            remainingMs: 120000, // 2:00
            running: false,
            startedAt: 0,
            handle: null
        },
        settings: {
            tieMode: 'revote' // 'revote' –∏–ª–∏ 'roulette'
        }
    },
    
    // Night actions tracking
    nightActions: {
        mafiaTarget: null,
        godfatherConfirm: null,
        loverTarget: null,
        doctorTarget: null,
        maniacTarget: null,
        minedTargets: [],
        sheriffChecks: []
    },
    
    // Night sequence tracking
    currentNightRole: null,
    nightRoleIndex: 0,
    nightSequence: ['mafia', 'don', 'consigliere', 'lover', 'doctor', 'maniac', 'bomber', 'commissar'],
    
    // Game log
    log: [],
    
    // Settings
    settings: {
        gameMode: 'hidden',
        enabledRoles: {
            don: true,
            consigliere: false,

            commissar: true,
            doctor: true,
            lover: false,
            bomber: false,
            maniac: false,
            kamikaze: false,
            werewolf: false
        }
    },
    
    // Metadata for save/restore system
    meta: {
        version: 1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    }
};

// Role definitions - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–û –¢–ó
const roleDefinitions = {
    // –ú–∞—Ñ–∏—è –∫–æ–º–∞–Ω–¥–∞
    mafia: { name: '–ú–∞—Ñ–∏—è', team: 'mafia', emoji: 'üî´', color: '#e74c3c', nightOrder: 1 },
    don: { name: '–î–æ–Ω', team: 'mafia', emoji: 'üëë', color: '#8b0000', nightOrder: 1 },
    consigliere: { name: '–ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏', team: 'mafia', emoji: 'ü§ù', color: '#dc143c', nightOrder: 2 },
    
    // –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏
    sheriff: { name: '–ö–æ–º–∏—Å—Å–∞—Ä', team: 'civilian', emoji: 'üîé', color: '#3498db', nightOrder: 4 },
    doctor: { name: '–î–æ–∫—Ç–æ—Ä', team: 'civilian', emoji: 'üíâ', color: '#2ecc71', nightOrder: 5 },
    bomber: { name: '–ü–æ–¥—Ä—ã–≤–Ω–∏–∫', team: 'civilian', emoji: 'üí£', color: '#ff6b35', nightOrder: 9 },
    jailer: { name: '–¢—é—Ä–µ–º—â–∏–∫', team: 'civilian', emoji: 'üîí', color: '#708090', nightOrder: 3 },
    civilian: { name: '–ú–∏—Ä–Ω—ã–π', team: 'civilian', emoji: 'üë§', color: '#74b9ff', nightOrder: null },
    
    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
    maniac: { name: '–ú–∞–Ω—å—è–∫', team: 'neutral', emoji: 'üî™', color: '#8e44ad', nightOrder: 6 },
    lover: { name: '–õ—é–±–æ–≤–Ω–∏—Ü–∞', team: 'neutral', emoji: 'üíã', color: '#e91e63', nightOrder: 7 },
    kamikaze: { name: '–ö–∞–º–∏–∫–∞–¥–∑–µ', team: 'neutral', emoji: 'üí•', color: '#ff4500', nightOrder: 8 },
    werewolf: { name: '–û–±–æ—Ä–æ—Ç–µ–Ω—å', team: 'neutral', emoji: 'üê∫', color: '#556b2f', nightOrder: 10 }
};

// Avatar color management
function updateAvatarColors() {
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è —Ñ–∞–∑—ã:', gameState.phase);
    
    gameState.players.forEach(player => {
        const seatElement = document.querySelector(`[data-player-id="${player.id}"]`);
        if (!seatElement || player.status !== 'alive') return;
        
        // Add or remove role class based on night phase
        if (gameState.phase === 'night' || gameState.phase === 'firstNight') {
            if (player.role) {
                seatElement.classList.add(player.role);
            }
        } else {
            // Remove all role classes during day phase
            Object.keys(roleDefinitions).forEach(role => {
                seatElement.classList.remove(role);
            });
        }
    });
}

// Night roles - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–û –¢–ó
const nightRoles = {
    mafia: { 
        name: '–ú–∞—Ñ–∏—è', 
        action: '–≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞', 
        emoji: 'üî´',
        color: '#e74c3c',
        hint: '–ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ —Ü–µ–ª—å',
        targetIcon: 'üî´',
        description: '–ú–∞—Ñ–∏—è –∏ –î–æ–Ω –≤—ã–±–∏—Ä–∞—é—Ç –æ–¥–Ω—É —Ü–µ–ª—å –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞'
    },
    consigliere: { 
        name: '–ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏', 
        action: '–≤–µ—Ä–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ñ–∏—é', 
        emoji: 'ü§ù',
        color: '#dc143c',
        hint: '–ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –≤–µ—Ä–±–æ–≤–∫–∏',
        targetIcon: 'ü§ù',
        description: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: –≤–µ—Ä–±—É–µ—Ç –º–∏—Ä–Ω–æ–≥–æ –≤ –º–∞—Ñ–∏—é'
    },
    jailer: { 
        name: '–¢—é—Ä–µ–º—â–∏–∫', 
        action: '–∞—Ä–µ—Å—Ç–æ–≤—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞', 
        emoji: 'üîí',
        color: '#708090',
        hint: '–¢—é—Ä–µ–º—â–∏–∫ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –∞—Ä–µ—Å—Ç–∞',
        targetIcon: 'üîí',
        description: '–ê—Ä–µ—Å—Ç–æ–≤—ã–≤–∞–µ—Ç –º–∞—Ñ–∏—é, –±–ª–æ–∫–∏—Ä—É—è –µ—ë –¥–µ–π—Å—Ç–≤–∏—è'
    },
    sheriff: { 
        name: '–ö–æ–º–∏—Å—Å–∞—Ä', 
        action: '–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–∞', 
        emoji: 'üîé',
        color: '#3498db',
        hint: '–ö–æ–º–∏—Å—Å–∞—Ä –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        targetIcon: 'üîé',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏'
    },
    doctor: { 
        name: '–î–æ–∫—Ç–æ—Ä', 
        action: '–ª–µ—á–∏—Ç –∏–≥—Ä–æ–∫–∞', 
        emoji: 'üíâ',
        color: '#2ecc71',
        hint: '–î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞',
        targetIcon: 'üíâ',
        description: '–õ–µ—á–∏—Ç –∏–≥—Ä–æ–∫–∞, —Å–ø–∞—Å–∞—è –æ—Ç —É–±–∏–π—Å—Ç–≤–∞ –º–∞—Ñ–∏–∏ –∏–ª–∏ –º–∞–Ω—å—è–∫–∞'
    },
    maniac: { 
        name: '–ú–∞–Ω—å—è–∫', 
        action: '—É–±–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞', 
        emoji: 'üî™',
        color: '#8e44ad',
        hint: '–ú–∞–Ω—å—è–∫ –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É',
        targetIcon: 'üî™',
        description: '–£–±–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–∞—Ñ–∏–∏'
    },
    lover: { 
        name: '–õ—é–±–æ–≤–Ω–∏—Ü–∞', 
        action: '–ø—Ä–æ–≤–æ–¥–∏—Ç –Ω–æ—á—å —Å –∏–≥—Ä–æ–∫–æ–º', 
        emoji: 'üíã',
        color: '#e91e63',
        hint: '–õ—é–±–æ–≤–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        targetIcon: 'üíã',
        description: '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–º–µ—Ä—Ç–∏'
    },
    kamikaze: { 
        name: '–ö–∞–º–∏–∫–∞–¥–∑–µ', 
        action: '–∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞', 
        emoji: 'üí•',
        color: '#ff4500',
        hint: '–ö–∞–º–∏–∫–∞–¥–∑–µ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏',
        targetIcon: 'üí•',
        description: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞: —É–±–∏–≤–∞–µ—Ç –º–∞—Ñ–∏—é —Ü–µ–Ω–æ–π —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏'
    }
};



// Initialize game

// –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û –¢–ó
let nightPlan = {
    mafiaTarget: null,
    consigliereTarget: null,
    sheriffTarget: null,
    doctorTarget: null,
    maniacTarget: null,
    loverTarget: null,
    kamikazeTarget: null,
    jailerTarget: null
};

let initialMafiaCount = 0;
let consigliereUsed = false;
let kamikazeUsed = false;
let bomberMinedIds = new Set();
let nightLogs = [];

// –£–¥–∞–ª–µ–Ω–æ - –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

document.addEventListener('DOMContentLoaded', function() {
    loadGameData();
    updateUI();
    addHistoryEntry('üéÆ –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–∞—à–∞ –ú–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    updateGameInstructions();
    loadUpcomingEvent(); // Load upcoming event from bot
});

// Load upcoming event from API
async function loadUpcomingEvent() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ...');
        
        const response = await fetch('/api/events');
        if (!response.ok) {
            throw new Error('Failed to fetch upcoming events');
        }
        
        const data = await response.json();
        const events = data.ok ? (data.events || []) : [];
        
        if (events.length === 0) {
            showNoEventMessage();
            return;
        }
        
        currentUpcomingEvent = events[0];
        console.log('üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', currentUpcomingEvent);
        
        // Load registrations for this event
        await loadEventRegistrations(currentUpcomingEvent.id);
        
        displayUpcomingEvent();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
        showEventError();
    }
}

// Load event registrations
async function loadEventRegistrations(eventId) {
    try {
        const response = await fetch(`/api/events/${eventId}/registrations`);
        if (!response.ok) {
            throw new Error('Failed to fetch registrations');
        }
        
        eventRegistrations = await response.json();
        console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', eventRegistrations);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
        eventRegistrations = [];
    }
}

// Display upcoming event
function displayUpcomingEvent() {
    const eventCard = document.getElementById('upcomingEventCard');
    const eventStatus = document.getElementById('eventStatus');
    const eventDetails = document.getElementById('eventDetails');
    const eventRegistrationsElement = document.getElementById('eventRegistrations');
    
    if (!eventCard || !currentUpcomingEvent) return;
    
    // Calculate time until event
    const eventDate = new Date(`${currentUpcomingEvent.date}T${currentUpcomingEvent.time}`);
    const now = new Date();
    const timeUntil = eventDate - now;
    
    let statusText = '';
    if (timeUntil > 0) {
        const days = Math.floor(timeUntil / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeUntil % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        
        if (days > 0) {
            statusText = `–ß–µ—Ä–µ–∑ ${days} –¥–Ω. ${hours} —á.`;
        } else if (hours > 0) {
            statusText = `–ß–µ—Ä–µ–∑ ${hours} —á.`;
        } else {
            const minutes = Math.floor((timeUntil % (1000 * 60 * 60)) / (1000 * 60));
            statusText = `–ß–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.`;
        }
    } else {
        statusText = '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å';
    }
    
    // Update status
    eventStatus.textContent = statusText;
    
    // Update event details
    eventDetails.innerHTML = `
        <div class="event-detail-row">
            <span>üìÖ –î–∞—Ç–∞:</span>
            <span>${formatDate(currentUpcomingEvent.date)}</span>
        </div>
        <div class="event-detail-row">
            <span>‚è∞ –í—Ä–µ–º—è:</span>
            <span>${currentUpcomingEvent.time}</span>
        </div>
        <div class="event-detail-row">
            <span>üìç –ú–µ—Å—Ç–æ:</span>
            <span>${currentUpcomingEvent.location}</span>
        </div>
        <div class="event-detail-row">
            <span>üè† –ê–¥—Ä–µ—Å:</span>
            <span>${currentUpcomingEvent.address}</span>
        </div>
        <div class="event-detail-row">
            <span>üë• –ú–µ—Å—Ç:</span>
            <span>${currentUpcomingEvent.capacity}</span>
        </div>
    `;
    
    // Update registrations
    const totalPlayers = eventRegistrations.reduce((sum, reg) => sum + reg.playerCount, 0);
    
    if (eventRegistrations.length === 0) {
        eventRegistrationsElement.innerHTML = `
            <div class="registrations-header">üë• –ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è (0)</div>
            <div class="no-event-message">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è</div>
        `;
    } else {
        const registrationsHtml = eventRegistrations.map(reg => `
            <div class="registration-item">
                <span class="player-name">@${reg.username || 'unknown'}</span>
                <span class="player-count">${reg.playerCount} –∏–≥—Ä.</span>
            </div>
        `).join('');
        
        eventRegistrationsElement.innerHTML = `
            <div class="registrations-header">üë• –ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è (${totalPlayers}/${currentUpcomingEvent.capacity})</div>
            ${registrationsHtml}
        `;
    }
    
    // Show/hide action buttons based on registrations
    const playBtn = document.getElementById('playEventBtn');
    const loadBtn = document.getElementById('loadEventBtn');
    
    if (eventRegistrations.length >= 4) {
        playBtn.style.display = 'block';
        loadBtn.style.display = 'block';
    } else {
        playBtn.style.display = 'none';
        loadBtn.style.display = 'block';
    }
    
    // Show the event card
    eventCard.style.display = 'block';
}

// Show message when no events
function showNoEventMessage() {
    const eventCard = document.getElementById('upcomingEventCard');
    const eventDetails = document.getElementById('eventDetails');
    
    eventDetails.innerHTML = `
        <div class="no-event-message">
            –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.<br>
            –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –±–æ—Ç–µ.
        </div>
    `;
    
    document.getElementById('eventStatus').textContent = '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π';
    document.getElementById('eventRegistrations').innerHTML = '';
    document.getElementById('playEventBtn').style.display = 'none';
    document.getElementById('loadEventBtn').style.display = 'none';
    
    eventCard.style.display = 'block';
}

// Show error message
function showEventError() {
    const eventCard = document.getElementById('upcomingEventCard');
    const eventDetails = document.getElementById('eventDetails');
    
    eventDetails.innerHTML = `
        <div class="no-event-message">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π.<br>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.
        </div>
    `;
    
    document.getElementById('eventStatus').textContent = '–û—à–∏–±–∫–∞';
    document.getElementById('eventRegistrations').innerHTML = '';
    
    eventCard.style.display = 'block';
}

// Format date for display
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = { 
        day: 'numeric', 
        month: 'long', 
        weekday: 'short' 
    };
    return date.toLocaleDateString('ru-RU', options);
}

// Refresh upcoming event
async function refreshUpcomingEvent() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ...');
    document.getElementById('eventStatus').textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    await loadUpcomingEvent();
}

// Start game from event
function startGameFromEvent() {
    if (!currentUpcomingEvent || eventRegistrations.length === 0) {
        alert('–ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
        return;
    }
    
    const totalPlayers = eventRegistrations.reduce((sum, reg) => sum + reg.playerCount, 0);
    if (totalPlayers < 4) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
        return;
    }
    
    // Load players into game first
    loadEventPlayers();
    
    // Show event info in game setup
    showEventInfoInGameSetup();
    
    // Go directly to game setup section
    showSection('gameSetup');
    
    addHistoryEntry(`üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${currentUpcomingEvent.title}"`);
}

// Load players without showing alert or switching sections
function loadEventPlayers() {
    // Clear current players
    gameState.players = [];
    
    // Add registered players to game
    let seatNumber = 1;
    eventRegistrations.forEach(reg => {
        for (let i = 0; i < reg.playerCount; i++) {
            const playerName = i === 0 ? `@${reg.username}` : `@${reg.username}+${i}`;
            
            const player = {
                id: Date.now() + seatNumber,
                name: playerName,
                username: reg.username,
                telegramId: reg.userId,
                seatNumber: seatNumber,
                role: null,
                status: 'alive',
                actions: []
            };
            
            gameState.players.push(player);
            seatNumber++;
        }
    });
    
    // Update UI silently
    updatePlayersList();
    updateUI();
}

// Show event info in game setup section
function showEventInfoInGameSetup() {
    const eventInfo = document.getElementById('gameEventInfo');
    const eventDetails = document.getElementById('gameEventDetails');
    
    if (!eventInfo || !currentUpcomingEvent) return;
    
    const totalPlayers = eventRegistrations.reduce((sum, reg) => sum + reg.playerCount, 0);
    
    eventDetails.innerHTML = `
        <div class="event-info-row">
            <span>üìÖ –°–æ–±—ã—Ç–∏–µ:</span>
            <span>${currentUpcomingEvent.title}</span>
        </div>
        <div class="event-info-row">
            <span>üìç –ú–µ—Å—Ç–æ:</span>
            <span>${currentUpcomingEvent.location}</span>
        </div>
        <div class="event-info-row">
            <span>üë• –ò–≥—Ä–æ–∫–æ–≤:</span>
            <span>${totalPlayers} –∏–∑ ${currentUpcomingEvent.capacity}</span>
        </div>
        <div class="event-info-row">
            <span>‚è∞ –í—Ä–µ–º—è:</span>
            <span>${formatDate(currentUpcomingEvent.date)} –≤ ${currentUpcomingEvent.time}</span>
        </div>
    `;
    
    eventInfo.style.display = 'block';
}

// Load event data into game
async function loadEventToGame() {
    if (!currentUpcomingEvent || eventRegistrations.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏–≥—Ä—É');
        return;
    }
    
    // Clear current players
    gameState.players = [];
    
    try {
        // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userIds = eventRegistrations.map(reg => reg.userId);
        const response = await fetch('/api/players/profiles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userIds })
        });
        
        const profiles = await response.json();
        const profileMap = {};
        profiles.forEach(profile => {
            profileMap[profile.id] = profile;
        });
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:', profileMap);
        
        // Add registered players to game with profile data
        let seatNumber = 1;
        eventRegistrations.forEach(reg => {
            const profile = profileMap[reg.userId];
            for (let i = 0; i < reg.playerCount; i++) {
                const playerName = i === 0 
                    ? (profile?.nickname || `@${reg.username}`)
                    : `${profile?.nickname || `@${reg.username}`}+${i}`;
                
                const player = {
                    id: Date.now() + seatNumber,
                    name: playerName,
                    displayName: profile?.realName || profile?.nickname || reg.username,
                    nickname: profile?.nickname,
                    realName: profile?.realName,
                    username: reg.username,
                    telegramId: reg.userId,
                    avatarUrl: profile?.avatarUrl,
                    isRegistered: profile?.isRegistered,
                    seatNumber: seatNumber,
                    role: null,
                    status: 'alive',
                    actions: []
                };
                
                gameState.players.push(player);
                seatNumber++;
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
        // Fallback –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
        let seatNumber = 1;
        eventRegistrations.forEach(reg => {
            for (let i = 0; i < reg.playerCount; i++) {
                const playerName = i === 0 ? `@${reg.username}` : `@${reg.username}+${i}`;
                
                const player = {
                    id: Date.now() + seatNumber,
                    name: playerName,
                    username: reg.username,
                    telegramId: reg.userId,
                    seatNumber: seatNumber,
                    role: null,
                    status: 'alive',
                    actions: []
                };
                
                gameState.players.push(player);
                seatNumber++;
            }
        });
    }
    
    // Update UI and show players section
    updatePlayersList();
    updateUI();
    showSection('players');
    
    addLogEntry(`–ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã`, `–ò–∑ —Å–æ–±—ã—Ç–∏—è "${currentUpcomingEvent.title}" (${gameState.players.length} –∏–≥—Ä–æ–∫–æ–≤)`);
    
    alert(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${gameState.players.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏—è "${currentUpcomingEvent.title}"`);
}

// History management (compatibility)
function addHistoryEntry(message) {
    addLogEntry(message);
}

// === NEW GAME SYSTEM FUNCTIONS ===

// Log system
function addLogEntry(action, details = '', phase = null) {
    const timestamp = new Date().toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    const entry = {
        timestamp,
        phase: phase || gameState.phase,
        action,
        details
    };
    
    gameState.log.push(entry);
    updateLogDisplay();
    console.log(`üìù ${timestamp} [${entry.phase}] ${action}`, details);
}

function updateLogDisplay() {
    const logContent = document.getElementById('logContent');
    if (!logContent) return;
    
    const entries = gameState.log.slice(-20).reverse(); // Show last 20 entries
    logContent.innerHTML = entries.map(entry => `
        <div class="log-entry">
            <div class="log-time">${entry.timestamp}</div>
            <div class="log-action">${entry.action}</div>
            ${entry.details ? `<div class="log-details">${entry.details}</div>` : ''}
        </div>
    `).join('');
    
    // Auto-scroll to top
    logContent.scrollTop = 0;
}

// Player status management
function updatePlayerStatus(playerId, status, reason = '') {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    const oldStatus = player.status;
    player.status = status;
    
    if (status === 'eliminated') {
        player.alive = false;
        addLogEntry(`–ò–≥—Ä–æ–∫ –≤—ã–±—ã–ª`, `${player.name} - ${reason}`, gameState.phase);
    } else if (status === 'alive') {
        player.alive = true;
        addLogEntry(`–ò–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ`, `${player.name}`, gameState.phase);
    }
    
    updatePlayerDisplay(player);
    updateGameStats();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    checkGameEnd();
}

function updatePlayerDisplay(player) {
    const seatElement = document.querySelector(`[data-player-id="${player.id}"]`);
    if (!seatElement) return;
    
    // Update classes
    seatElement.className = 'player-seat';
    if (player.status === 'alive') {
        seatElement.classList.add('alive');
    } else if (player.status === 'dead' || player.status === 'eliminated') {
        seatElement.classList.add('dead', 'eliminated');
    }
    
    // Add role-specific styling for night phase
    if ((gameState.phase === 'night' || gameState.phase === 'firstNight') && player.role) {
        seatElement.classList.add(`role-${player.role}`);
        
        // Add active highlighting for current night role
        if (gameState.currentNightRole === player.role) {
            seatElement.classList.add('night-active');
        } else {
            seatElement.classList.remove('night-active');
        }
    } else {
        // Remove role classes when not in night phase
        Object.keys(roleDefinitions).forEach(role => {
            seatElement.classList.remove(`role-${role}`);
        });
        seatElement.classList.remove('night-active');
    }
    
    // Update the content with role badge on avatar
    const roleInfo = player.role ? roleDefinitions[player.role] : null;
    const showRole = gameState.settings.gameMode === 'open' || gameState.phase === 'finished';
    
    // Role badge positioned on top of player name/avatar - only show in open mode or when game finished
    let roleBadge = '';
    if (roleInfo && showRole) {
        roleBadge = `<div class="role-badge" style="
            position: absolute;
            top: -5px;
            right: -5px;
            background: var(--role-${player.role}, #666);
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 8px;
            border: 1px solid white;
            box-shadow: 0 1px 2px rgba(0,0,0,0.3);
            z-index: 5;
        ">${roleInfo.emoji}</div>`;
    }
    
    // Create avatar content - prioritize avatarUrl from registration, fallback to Telegram
    let avatarContent = 'üë§'; // Default fallback
    if (player.avatarUrl) {
        // Use uploaded avatar from registration
        avatarContent = `<img src="${player.avatarUrl}" 
                         style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                         onerror="this.style.display='none'; this.parentElement.innerHTML='üë§' + (this.parentElement.querySelector('.role-badge')?.outerHTML || '');"
                         alt="${player.displayName || player.name}">`;
    } else if (player.telegramId) {
        // Fallback to Telegram avatar
        avatarContent = `<img src="https://t.me/i/userpic/160/${player.username || player.telegramId}.jpg" 
                         style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                         onerror="this.style.display='none'; this.parentElement.innerHTML='üë§' + (this.parentElement.querySelector('.role-badge')?.outerHTML || '');"
                         alt="${player.displayName || player.name}">`;
    }
    
    seatElement.innerHTML = `
        <div class="player-avatar" style="position: relative; width: 100%; height: 100%;">
            ${avatarContent}
            ${roleBadge}
        </div>
    `;
    
    // Create name element outside the seat
    const existingNameElement = seatElement.parentElement.querySelector(`[data-name-for="${player.id}"]`);
    if (existingNameElement) {
        existingNameElement.remove();
    }
    
    const nameElement = document.createElement('div');
    nameElement.className = 'player-name-external';
    nameElement.setAttribute('data-name-for', player.id);
    
    // Show nickname from registration if available, otherwise display name or username
    const displayText = player.nickname || player.displayName || player.name;
    nameElement.textContent = displayText.length > 8 ? displayText.substring(0, 8) + '...' : displayText;
    
    // Position name below the seat
    nameElement.style.position = 'absolute';
    nameElement.style.left = seatElement.style.left;
    nameElement.style.top = `calc(${seatElement.style.top} + 68px)`;
    nameElement.style.transform = 'translateX(-50%)';
    nameElement.style.marginLeft = '30px';
    
    seatElement.parentElement.appendChild(nameElement);
    
    // Update badges
    updatePlayerBadges(player);
}

function updatePlayerBadges(player) {
    const seatElement = document.querySelector(`[data-player-id="${player.id}"]`);
    if (!seatElement) return;
    
    // Remove existing badges
    const existingBadges = seatElement.querySelectorAll('.player-badge');
    existingBadges.forEach(badge => badge.remove());
    
    // Add new badges based on flags
    if (player.flags) {
        if (player.flags.protectedByLover) {
            const badge = document.createElement('div');
            badge.className = 'player-badge protected';
            badge.textContent = 'üíã';
            seatElement.appendChild(badge);
        }
        
        if (player.flags.mined) {
            const badge = document.createElement('div');
            badge.className = 'player-badge mined';
            badge.textContent = 'üí£';
            seatElement.appendChild(badge);
        }
        
        if (player.flags.checkedBySheriff) {
            const badge = document.createElement('div');
            badge.className = 'player-badge checked';
            badge.textContent = 'üîé';
            seatElement.appendChild(badge);
        }
    }
}

// Phase management
function setGamePhase(newPhase, subPhase = null) {
    const oldPhase = gameState.phase;
    gameState.phase = newPhase;
    gameState.subPhase = subPhase;
    
    // Clear voting display when leaving voting phase
    if (oldPhase === 'voting' && newPhase !== 'voting') {
        updateVisualVoting();
    }
    
    addLogEntry(`–°–º–µ–Ω–∞ —Ñ–∞–∑—ã`, `${oldPhase} ‚Üí ${newPhase}${subPhase ? ` (${subPhase})` : ''}`, newPhase);
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ night
    if (newPhase === 'night') {
        console.log('üåô –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É...');
        setTimeout(() => {
            startNightPhase();
        }, 100);
    }
    
    updatePhaseDisplay();
    updateCenterPanel();
    updateBottomControls();
    updateGameInstructions();
    updateNightPhaseHighlighting();
    updateAvatarColors(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–∫ –ø–æ —Ñ–∞–∑–µ
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
}

// Add the missing updateGameInstructions function to avoid errors
function updateGameInstructions() {
    const instruction = document.getElementById('phaseInstruction');
    if (!instruction) return;
    
    const instructions = {
        'setup': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞',
        'preparation': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É',
        'introduction': '–ò–≥—Ä–æ–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ –∫—Ä—É–≥—É',
        'firstNight': '–ü–µ—Ä–≤–∞—è –Ω–æ—á—å - –º–∞—Ñ–∏—è –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è',
        'day': '–î–Ω–µ–≤–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è',
        'voting': '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
        'night': '–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ - –¥–µ–π—Å—Ç–≤—É—é—Ç —Ä–æ–ª–∏',
        'results': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
        'finished': '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    
    instruction.textContent = instructions[gameState.phase] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞';
}

// Night phase control functions
function setActiveNightRole(role) {
    gameState.currentNightRole = role;
    console.log(`üåô –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: ${role}`);
    updateCenterPanel();
    updateNightPhaseHighlighting();
}

function clearActiveNightRole() {
    gameState.currentNightRole = null;
    console.log('üåô –ù–æ—á–Ω–∞—è —Ä–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
    updateCenterPanel();
    updateNightPhaseHighlighting();
}

function confirmNightAction() {
    if (!selectedTargetId || !gameState.currentNightRole) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è!');
        return;
    }
    
    const targetPlayer = gameState.players.find(p => p.id === selectedTargetId);
    const role = nightRoles[gameState.currentNightRole];
    
    if (!targetPlayer) {
        alert('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å undefined
    const actionResult = `${role ? role.name : gameState.currentNightRole} ${role ? role.action : '–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞'}: ${targetPlayer.name}`;
    
    gameState.nightActions.push({
        role: gameState.currentNightRole,
        roleData: role,
        targetId: selectedTargetId,
        targetName: targetPlayer.name,
        actionResult: actionResult,
        timestamp: new Date()
    });
    
    addLogEntry(`${role ? role.emoji : 'üåô'} ${actionResult}`);
    
    // –ü–†–ò–ú–ï–ù–Ø–ï–ú –≠–§–§–ï–ö–¢–´ –ö –ò–ì–†–û–ö–ê–ú
    applyNightAction(gameState.currentNightRole, selectedTargetId);
    
    // –ö–æ–º–∏—Å—Å–∞—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)
    if (gameState.currentNightRole === 'sheriff') {
        const isMafia = ['mafia','don','consigliere'].includes(targetPlayer.role);
        showToast(isMafia ? 'success' : 'info', isMafia ? 'üëç' : 'üëé', isMafia ? '–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ ‚Äî –º–∞—Ñ–∏—è' : '–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ ‚Äî –Ω–µ –º–∞—Ñ–∏—è');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ö–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    updateNightHistoryContent();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    const centerActions = document.getElementById('centerActions');
    if (centerActions && role) {
        centerActions.innerHTML = `
            <div style="background: ${role.color}; color: white; padding: 20px; border-radius: 15px; text-align: center; margin-bottom: 20px;">
                <h3 style="margin: 0 0 10px 0;">${role.emoji} –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</h3>
                <p style="margin: 0; font-size: 16px; opacity: 0.9;">${role.hint}: ${targetPlayer.name}</p>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <p style="color: #2ed573; font-size: 14px;">–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...</p>
            </div>
        `;
    }
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentNightRole –∑–¥–µ—Å—å, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ nextNightRole()
    console.log('‚úÖ Night action confirmed:', actionResult);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        nextNightRole();
    }, 2000);
}

function switchToDay() {
    gameState.dayNumber++;
    setGamePhase('day');
    addLogEntry('–ù–æ–≤—ã–π –¥–µ–Ω—å', `–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å ${gameState.dayNumber}`);
    updatePlayerTable();
}

function updatePhaseDisplay() {
    const phaseElement = document.getElementById('currentPhase');
    const instructionElement = document.getElementById('phaseInstruction');
    
    if (!phaseElement) return;
    
    let phaseText = '';
    let instructionText = '';
    
    switch (gameState.phase) {
        case 'setup':
            phaseText = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞';
            instructionText = '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É';
            break;
        case 'preparation':
            phaseText = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ';
            instructionText = '–†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è';
            break;
        case 'introduction':
            phaseText = `–î–µ–Ω—å ${gameState.dayNumber} - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ`;
            instructionText = `–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫ ‚Ññ${gameState.orderIndex + 1}`;
            break;
        case 'firstNight':
            phaseText = '–ü–µ—Ä–≤–∞—è –Ω–æ—á—å';
            instructionText = '–ú–∞—Ñ–∏—è –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è';
            break;
        case 'day':
            phaseText = `–î–µ–Ω—å ${gameState.dayNumber}`;
            instructionText = '–û–±—Å—É–∂–¥–µ–Ω–∏–µ';
            break;
        case 'voting':
            phaseText = `–î–µ–Ω—å ${gameState.dayNumber} - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ`;
            instructionText = `–ì–æ–ª–æ—Å—É–µ—Ç –∏–≥—Ä–æ–∫ ‚Ññ${gameState.orderIndex + 1}`;
            break;
        case 'night':
            phaseText = `–ù–æ—á—å ${gameState.nightNumber}`;
            const currentRole = gameState.currentNightRole;
            instructionText = currentRole ? `–î–µ–π—Å—Ç–≤—É–µ—Ç: ${roleDefinitions[currentRole]?.name || currentRole}` : '–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è';
            break;
        case 'results':
            phaseText = `–£—Ç—Ä–æ –¥–Ω—è ${gameState.dayNumber}`;
            instructionText = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏';
            break;
        case 'finished':
            phaseText = '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
            instructionText = '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤';
            break;
    }
    
    phaseElement.textContent = phaseText;
    if (instructionElement) {
        instructionElement.textContent = instructionText;
    }
}

function updateGameStats() {
    const alivePlayers = gameState.players.filter(p => p.status === 'alive');
    const aliveMafia = alivePlayers.filter(p => p.role && roleDefinitions[p.role]?.team === 'mafia');
    
    const aliveCountElement = document.getElementById('aliveCount');
    const mafiaAliveElement = document.getElementById('mafiaAlive');
    const dayDisplayElement = document.getElementById('dayDisplay');
    
    if (aliveCountElement) aliveCountElement.textContent = alivePlayers.length;
    if (mafiaAliveElement) mafiaAliveElement.textContent = aliveMafia.length;
    if (dayDisplayElement) dayDisplayElement.textContent = gameState.dayNumber;
}

// Center panel management
function updateCenterPanel() {
    const centerActions = document.getElementById('centerActions');
    if (!centerActions) return;
    
    let buttons = '';
    
    switch (gameState.phase) {
        case 'setup':
            if (gameState.players.length >= 4) {
                buttons = '<button class="center-action-btn primary" onclick="showSection(\'gameSetup\')">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É</button>';
            }
            break;
        case 'preparation':
            buttons = '<button class="center-action-btn primary" onclick="startIntroduction()">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ</button>';
            break;
        case 'introduction':
            const currentPlayer = getPlayerBySeat(gameState.orderIndex + 1);
            if (currentPlayer) {
                buttons = `
                    <button class="center-action-btn primary" onclick="playerIntroduced()">‚úÖ ${currentPlayer.name} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è</button>
                    <button class="center-action-btn" onclick="skipIntroduction()">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                `;
            }
            break;
        case 'firstNight':
            if (gameState.currentNightRole) {
                const roleName = roleDefinitions[gameState.currentNightRole]?.name || gameState.currentNightRole;
                buttons = `
                    <div style="text-align: center; margin-bottom: 10px;">
                        <strong>–î–µ–π—Å—Ç–≤—É–µ—Ç: ${roleName}</strong>
                    </div>
                    <button class="center-action-btn" onclick="clearActiveNightRole()">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>
                    <button class="center-action-btn primary" onclick="confirmNightAction()">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                `;
            } else {
                buttons = '<button class="center-action-btn primary" onclick="mafiaIntroduced()">‚úÖ –ú–∞—Ñ–∏—è –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—å</button>';
            }
            break;
        case 'day':
            buttons = '<button class="center-action-btn primary" onclick="startVoting()">üó≥Ô∏è –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</button>';
            break;
        case 'voting':
            const alivePlayers = gameState.players.filter(p => p.status === 'alive');
            const votedCount = Object.keys(gameState.voting.votes).length;
            const allVoted = votedCount >= alivePlayers.length;
            
            // –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            const mafiaCount = gameState.players.filter(p => p.status === 'alive' && p.role === 'mafia').length;
            const statusLine = `<div style="text-align: center; margin-bottom: 10px; font-size: 12px; color: #ccc;">
                –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî –î–µ–Ω—å ${gameState.dayNumber} | –ñ–∏–≤—ã: ${alivePlayers.length} | –ú–∞—Ñ–∏—è: ${mafiaCount} | –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ${votedCount}/${alivePlayers.length}
            </div>`;
            
            if (gameState.voting.currentVoterIdx < gameState.voting.order.length) {
                const currentVoterId = gameState.voting.order[gameState.voting.currentVoterIdx];
                const currentVoter = gameState.players.find(p => p.id === currentVoterId);
                
                if (currentVoter && !gameState.voting.votes[currentVoterId]) {
                    // –¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å—É—é—â–∏–π
                    const timeStr = formatTime(gameState.voting.timer.remainingMs);
                    const isWarning = gameState.voting.timer.remainingMs <= 30000;
                    
                    buttons = statusLine + `
                        <div style="text-align: center; margin-bottom: 15px;">
                            <div style="margin-bottom: 8px; font-size: 16px;">
                                <strong>–ì–æ–ª–æ—Å—É–µ—Ç: ${currentVoter.name}</strong>
                            </div>
                            <div style="font-size: 24px; font-weight: bold; color: ${isWarning ? '#ff6b6b' : '#4CAF50'}; margin-bottom: 8px;">
                                ‚è±Ô∏è ${timeStr}
                            </div>
                        </div>
                        <div style="display: flex; gap: 6px; flex-wrap: wrap; justify-content: center;">
                            <button class="center-action-btn small" onclick="skipVote()">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                            <button class="center-action-btn small" onclick="pauseResumeTimer()">${gameState.voting.timer.running ? '‚è∏Ô∏è –ü–∞—É–∑–∞' : '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}</button>
                            <button class="center-action-btn small" onclick="adjustTime(-30000)">-30—Å</button>
                            <button class="center-action-btn small" onclick="adjustTime(30000)">+30—Å</button>
                            <button class="center-action-btn small" onclick="resetVotingTimer()">üîÑ 2:00</button>
                        </div>
                    `;
                } else {
                    buttons = statusLine;
                }
            } else {
                buttons = statusLine;
            }
            
            if (allVoted) {
                buttons += '<div style="margin-top: 10px;"><button class="center-action-btn primary pulse" onclick="countVotes()">üìä –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –≥–æ–ª–æ—Å–∞</button></div>';
            }
            break;
        case 'night':
            if (gameState.currentNightRole) {
                const roleName = roleDefinitions[gameState.currentNightRole]?.name || gameState.currentNightRole;
                buttons = `
                    <div style="text-align: center; margin-bottom: 10px;">
                        <strong>–î–µ–π—Å—Ç–≤—É–µ—Ç: ${roleName}</strong>
                    </div>
                    <button class="center-action-btn" onclick="clearActiveNightRole()">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>
                    <button class="center-action-btn primary" onclick="confirmNightAction()">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                `;
            } else {
                buttons = '<button class="center-action-btn primary" onclick="switchToDay()">üåÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á—å</button>';
            }
            break;
        case 'results':
            buttons = '<button class="center-action-btn primary" onclick="startNewDay()">‚òÄÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω—é</button>';
            break;
    }
    
    centerActions.innerHTML = buttons;
}

// Bottom controls management
function updateBottomControls() {
    const stepBackBtn = document.getElementById('stepBackBtn');
    const stepForwardBtn = document.getElementById('stepForwardBtn');
    
    if (stepBackBtn) {
        stepBackBtn.disabled = gameState.log.length === 0;
    }
    
    if (stepForwardBtn) {
        stepForwardBtn.style.display = gameState.phase === 'finished' ? 'none' : 'inline-block';
    }
}

// Helper functions
function getPlayerBySeat(seatNumber) {
    return gameState.players.find(p => p.seatNumber === seatNumber && p.status === 'alive');
}

function checkGameEnd() {
    const alivePlayers = gameState.players.filter(p => p.status === 'alive');
    const aliveMafia = alivePlayers.filter(p => p.role && roleDefinitions[p.role]?.team === 'mafia');
    const aliveCivilians = alivePlayers.filter(p => p.role && roleDefinitions[p.role]?.team === 'civilian');
    
    if (aliveMafia.length === 0) {
        endGame('civilians', '–í—Å–µ –º–∞—Ñ–∏–æ–∑–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!');
    } else if (aliveMafia.length >= aliveCivilians.length) {
        endGame('mafia', '–ú–∞—Ñ–∏—è –∑–∞—Ö–≤–∞—Ç–∏–ª–∞ –≥–æ—Ä–æ–¥!');
    }
}

function endGame(winner, reason) {
    setGamePhase('finished');
    addLogEntry('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–ü–æ–±–µ–¥–∏–ª–∏: ${winner}. ${reason}`);
    
    // Show results
    updateCenterPanel();
}

// Game phase functions
function startIntroduction() {
    gameState.orderIndex = 0;
    setGamePhase('introduction');
    addLogEntry('–ù–∞—á–∞–ª–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', '–ò–≥—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è');
    highlightCurrentPlayer();
}

function playerIntroduced() {
    const currentPlayer = getPlayerBySeat(gameState.orderIndex + 1);
    if (currentPlayer) {
        addLogEntry('–ò–≥—Ä–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è', currentPlayer.name);
    }
    
    gameState.orderIndex++;
    const alivePlayers = gameState.players.filter(p => p.status === 'alive');
    
    if (gameState.orderIndex >= alivePlayers.length) {
        // All players introduced, go to first night
        setGamePhase('firstNight');
        addLogEntry('–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–π –Ω–æ—á–∏');
    } else {
        highlightCurrentPlayer();
        updateCenterPanel();
    }
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
}

function mafiaIntroduced() {
    gameState.nightNumber = 1;
    setGamePhase('day');
    gameState.dayNumber = 2;
    addLogEntry('–ú–∞—Ñ–∏—è –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—å', '–ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É –¥–Ω—é');
}



// ========== VISUAL VOTING SYSTEM ==========

function startVoting() {
    setGamePhase('voting');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    gameState.voting.isActive = true;
    gameState.voting.votes = {};
    gameState.voting.currentVoterIdx = 0;
    
    // –ü–æ—Ä—è–¥–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –ø–æ –º–µ—Å—Ç–∞–º —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö
    gameState.voting.order = gameState.players
        .filter(p => p.status === 'alive')
        .sort((a, b) => a.seatNumber - b.seatNumber)
        .map(p => p.id);
    
    addLogEntry('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî –î–µ–Ω—å ${gameState.dayNumber}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${gameState.voting.order.length}`);
    
    // –ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥
    if (gameState.voting.order.length > 0) {
        startCurrentVoterTurn();
    }
    
    updateVisualVoting();
    updateCenterPanel();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
}

function startCurrentVoterTurn() {
    // –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞
    stopVotingTimer();
    
    if (gameState.voting.currentVoterIdx >= gameState.voting.order.length) {
        // –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        updateVisualVoting();
        updateCenterPanel();
        return;
    }
    
    const voterId = gameState.voting.order[gameState.voting.currentVoterIdx];
    const voter = gameState.players.find(p => p.id === voterId);
    
    if (!voter || voter.status !== 'alive' || gameState.voting.votes[voterId]) {
        // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤ –∏–ª–∏ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        gameState.voting.currentVoterIdx++;
        startCurrentVoterTurn();
        return;
    }
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä 2:00
    console.log(`üïí –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${voter.name} –Ω–∞ 2 –º–∏–Ω—É—Ç—ã`);
    startVotingTimer(() => {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ  
        console.log(`‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${voter.name}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ`);
        gameState.voting.votes[voterId] = 'abstain';
        addLogEntry('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', `${voter.name} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è`);
        nextVoter();
    });
    
    updateVisualVoting();
    updateCenterPanel();
}

function handleVoteClick(targetId) {
    if (!gameState.voting.isActive) return;
    
    const voterId = gameState.voting.order[gameState.voting.currentVoterIdx];
    const voter = gameState.players.find(p => p.id === voterId);
    const target = gameState.players.find(p => p.id === targetId);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!voter || voter.status !== 'alive') return;
    if (!target || target.status !== 'alive') return;
    if (voterId === targetId) return; // –ù–µ–ª—å–∑—è –∑–∞ —Å–µ–±—è
    if (gameState.voting.votes[voterId]) return; // –£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showVoteConfirmation(voter, target, () => {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å
        gameState.voting.votes[voterId] = targetId;
        addLogEntry('–ì–æ–ª–æ—Å –ø–æ–¥–∞–Ω', `${voter.name} –≥–æ–ª–æ—Å—É–µ—Ç –ø—Ä–æ—Ç–∏–≤ ${target.name}`);
        scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –≥–æ–ª–æ—Å–∞
        nextVoter();
    });
}

function showVoteConfirmation(voter, target, onConfirm) {
    const modal = document.createElement('div');
    modal.className = 'vote-confirmation-modal';
    modal.innerHTML = `
        <div class="vote-confirmation-content">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ–ª–æ—Å</h3>
            <p><strong>${voter.name}</strong> –≥–æ–ª–æ—Å—É–µ—Ç –ø—Ä–æ—Ç–∏–≤ <strong>${target.name}</strong></p>
            <div class="modal-buttons">
                <button class="modal-btn confirm" onclick="confirmVote()">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                <button class="modal-btn cancel" onclick="cancelVote()">–û—Ç–º–µ–Ω–∏—Ç—å</button>
            </div>
        </div>
    `;
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    window.confirmVote = () => {
        document.body.removeChild(modal);
        delete window.confirmVote;
        delete window.cancelVote;
        onConfirm();
    };
    
    window.cancelVote = () => {
        document.body.removeChild(modal);
        delete window.confirmVote;
        delete window.cancelVote;
    };
    
    document.body.appendChild(modal);
}

function nextVoter() {
    stopVotingTimer();
    gameState.voting.currentVoterIdx++;
    startCurrentVoterTurn();
}

function skipVote() {
    if (!gameState.voting.isActive) return;
    
    const voterId = gameState.voting.order[gameState.voting.currentVoterIdx];
    const voter = gameState.players.find(p => p.id === voterId);
    
    if (voter && !gameState.voting.votes[voterId]) {
        gameState.voting.votes[voterId] = 'abstain';
        addLogEntry('–ì–æ–ª–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω', `${voter.name} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è`);
        nextVoter();
    }
}

function countVotes() {
    if (!gameState.voting.isActive) return;
    
    // –ü–æ–¥—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤ –∂–∏–≤—ã—Ö (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º abstain)
    const voteCounts = new Map();
    Object.values(gameState.voting.votes).forEach(targetId => {
        if (targetId && targetId !== 'abstain') {
            voteCounts.set(targetId, (voteCounts.get(targetId) || 0) + 1);
        }
    });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let resultsText = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n';
    voteCounts.forEach((count, targetId) => {
        const player = gameState.players.find(p => p.id === targetId);
        resultsText += `${player?.name}: ${count} –≥–æ–ª–æ—Å(–æ–≤)\n`;
    });
    
    const abstainCount = Object.values(gameState.voting.votes).filter(v => v === 'abstain').length;
    if (abstainCount > 0) {
        resultsText += `–í–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å: ${abstainCount}`;
    }
    
    addLogEntry('–ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤', resultsText);
    
    if (voteCounts.size === 0) {
        addLogEntry('–†–µ–∑—É–ª—å—Ç–∞—Ç', '–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤');
        endVoting();
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤
        setTimeout(() => {
            setGamePhase('night');
            updateCenterPanel();
        }, 3000);
        return;
    }
    
    // –ù–∞–π—Ç–∏ –ª–∏–¥–µ—Ä–æ–≤
    let maxVotes = 0;
    let leaders = [];
    voteCounts.forEach((count, targetId) => {
        if (count > maxVotes) {
            maxVotes = count;
            leaders = [targetId];
        } else if (count === maxVotes) {
            leaders.push(targetId);
        }
    });
    
    if (leaders.length === 1) {
        // –ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π –ª–∏–¥–µ—Ä - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        const eliminatedId = leaders[0];
        const eliminated = gameState.players.find(p => p.id === eliminatedId);
        
        updatePlayerStatus(eliminatedId, 'dead', `–ò—Å–∫–ª—é—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º (${maxVotes} –≥–æ–ª–æ—Å–æ–≤)`);
        addLogEntry('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ', `üíÄ ${eliminated.name} –∏—Å–∫–ª—é—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º (${maxVotes} –≥–æ–ª–æ—Å–æ–≤)`);
        
        endVoting();
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        setTimeout(() => {
            if (!checkGameEnd()) {
                setGamePhase('night');
                updateCenterPanel();
            }
        }, 3000);
        
    } else {
        // –ù–∏—á—å—è - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        const tiedNames = leaders.map(id => gameState.players.find(p => p.id === id)?.name).join(', ');
        
        if (gameState.voting.settings.tieMode === 'revote') {
            addLogEntry('–ù–∏—á—å—è', `–ù–∏—á—å—è –º–µ–∂–¥—É: ${tiedNames}. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ`);
            startVoting(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
        } else if (gameState.voting.settings.tieMode === 'roulette') {
            addLogEntry('–ù–∏—á—å—è', `–ù–∏—á—å—è –º–µ–∂–¥—É: ${tiedNames}. –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞`);
            const randomWinner = leaders[Math.floor(Math.random() * leaders.length)];
            const eliminated = gameState.players.find(p => p.id === randomWinner);
            
            updatePlayerStatus(randomWinner, 'dead', '–ò—Å–∫–ª—é—á–µ–Ω —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–æ–π');
            addLogEntry('–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞', `üíÄ ${eliminated.name} –∏—Å–∫–ª—é—á–µ–Ω —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–æ–π`);
            
            endVoting();
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            setTimeout(() => {
                if (!checkGameEnd()) {
                    setGamePhase('night');
                    updateCenterPanel();
                }
            }, 3000);
        }
    }
}

function endVoting() {
    gameState.voting.isActive = false;
    stopVotingTimer();
    setGamePhase('results');
    updateVisualVoting(); // –û—á–∏—Å—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    updateCenterPanel();
}

// –ù–û–í–´–ô –ü–†–û–°–¢–û–ô –¢–ê–ô–ú–ï–† –° –í–ò–ó–£–ê–õ–¨–ù–´–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú
// ---- Voting timer (unified implementation) ----
function startVotingTimer(onExpire) {
    stopVotingTimer();

    const DURATION = 120000; // 2 –º–∏–Ω—É—Ç—ã
    const now = Date.now();

    gameState.voting.timer.running = true;
    gameState.voting.timer.startedAt = now;
    gameState.voting.timer.endTime = now + DURATION;     // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ endTime
    gameState.voting.timer.remainingMs = DURATION;

    console.log('üïí Unified —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω –Ω–∞ 120 —Å–µ–∫—É–Ω–¥ (2 –º–∏–Ω—É—Ç—ã)');

    // 1) –ê–≤—Ç–æ-–∏—Å—Ç–µ—á–µ–Ω–∏–µ
    gameState.voting.timer.handle = setTimeout(() => {
        gameState.voting.timer.running = false;
        updateVisualTimer();
        onExpire?.();
    }, DURATION);

    // 2) –¢–∏–∫ –¥–ª—è UI —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    gameState.voting.timer.visualInterval = setInterval(() => {
        if (!gameState.voting.timer.running) return;
        const rest = Math.max(0, gameState.voting.timer.endTime - Date.now());
        gameState.voting.timer.remainingMs = rest;
        updateCenterPanel();
        updateVisualTimer();
    }, 1000);
}

function stopVotingTimer() {
    gameState.voting.timer.running = false;
    if (gameState.voting.timer.handle) {
        clearTimeout(gameState.voting.timer.handle);
        gameState.voting.timer.handle = null;
    }
    if (gameState.voting.timer.visualInterval) {
        clearInterval(gameState.voting.timer.visualInterval);
        gameState.voting.timer.visualInterval = null;
    }
}

function pauseVotingTimer() {
    if (!gameState.voting.timer.running) return;
    gameState.voting.timer.running = false;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏ —á–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä—ã
    gameState.voting.timer.remainingMs = Math.max(0, gameState.voting.timer.endTime - Date.now());
    if (gameState.voting.timer.handle) clearTimeout(gameState.voting.timer.handle);
    gameState.voting.timer.handle = null;
    if (gameState.voting.timer.visualInterval) clearInterval(gameState.voting.timer.visualInterval);
    gameState.voting.timer.visualInterval = null;

    updateVisualTimer();
}

function resumeVotingTimer(onExpire) {
    if (gameState.voting.timer.running) return;
    if (gameState.voting.timer.remainingMs <= 0) return;

    const now = Date.now();
    gameState.voting.timer.running = true;
    gameState.voting.timer.startedAt = now;
    gameState.voting.timer.endTime = now + gameState.voting.timer.remainingMs;

    // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –∏ —Ç–∏–∫–∏ UI
    gameState.voting.timer.handle = setTimeout(() => {
        gameState.voting.timer.running = false;
        updateVisualTimer();
        onExpire?.();
    }, gameState.voting.timer.remainingMs);

    gameState.voting.timer.visualInterval = setInterval(() => {
        if (!gameState.voting.timer.running) return;
        const rest = Math.max(0, gameState.voting.timer.endTime - Date.now());
        gameState.voting.timer.remainingMs = rest;
        updateCenterPanel();
        updateVisualTimer();
    }, 1000);
}

function pauseResumeTimer() {
    if (gameState.voting.timer.running) {
        pauseVotingTimer();
    } else {
        resumeVotingTimer(() => {
            const voterId = gameState.voting.order[gameState.voting.currentVoterIdx];
            const voter = gameState.players.find(p => p.id === voterId);
            gameState.voting.votes[voterId] = 'abstain';
            addLogEntry('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', `${voter?.name || '–ò–≥—Ä–æ–∫'} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è`);
            nextVoter();
        });
    }
    updateCenterPanel();
}

function adjustTime(ms) {
    gameState.voting.timer.remainingMs = Math.max(0, gameState.voting.timer.remainingMs + ms);
    if (gameState.voting.timer.running) {
        gameState.voting.timer.endTime = Date.now() + gameState.voting.timer.remainingMs;
    }
    updateCenterPanel();
}

function resetVotingTimer() {
    // –ü–æ–ª–Ω—ã–π —Ä–µ—Å–µ—Ç (–Ω–µ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞) ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å 2:00
    startVotingTimer(() => {
        const voterId = gameState.voting.order[gameState.voting.currentVoterIdx];
        const voter = gameState.players.find(p => p.id === voterId);
        gameState.voting.votes[voterId] = 'abstain';
        addLogEntry('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', `${voter?.name || '–ò–≥—Ä–æ–∫'} –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è`);
        nextVoter();
    });
}

function updateVisualVoting() {
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    document.querySelectorAll('.player-seat').forEach(seat => {
        seat.classList.remove('voting-current', 'voting-target', 'voting-complete', 'vote-transition', 'voting-timer-warning');
        
        const oldLabel = seat.querySelector('.vote-label');
        if (oldLabel) oldLabel.remove();
        
        const oldTimer = seat.querySelector('.voting-timer-ring');
        if (oldTimer) oldTimer.remove();
        
        const oldTimerText = seat.querySelector('.voting-timer-text');
        if (oldTimerText) oldTimerText.remove();
    });
    
    if (!gameState.voting.isActive) return;
    
    const currentVoterId = gameState.voting.order[gameState.voting.currentVoterIdx];
    
    gameState.players.forEach(player => {
        const seat = document.querySelector(`[data-seat-number="${player.seatNumber}"]`);
        if (!seat) return;
        
        // –¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å—É—é—â–∏–π - –±–∏—Ä—é–∑–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ + —É–≤–µ–ª–∏—á–µ–Ω–∏–µ + —Ç–∞–π–º–µ—Ä
        if (player.id === currentVoterId && player.status === 'alive' && !gameState.voting.votes[player.id]) {
            seat.classList.add('voting-current');
            
            // –î–æ–±–∞–≤–∏—Ç—å –∫—Ä—É–≥–æ–≤–æ–π —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
            addVotingTimer(seat);
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–µ–∫—É–Ω–¥–∞—Ö
            if (gameState.voting.timer.remainingMs <= 10000) {
                seat.classList.add('voting-timer-warning');
            }
        }
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ - –±–µ–ª–∞—è —Ä–∞–º–∫–∞
        else if (player.status === 'alive' && player.id !== currentVoterId) {
            seat.classList.add('voting-target');
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–∞
        const vote = gameState.voting.votes[player.id];
        if (vote) {
            seat.classList.add('voting-complete');
            
            const voteLabel = document.createElement('div');
            voteLabel.className = 'vote-label';
            
            if (vote === 'abstain') {
                voteLabel.textContent = '–≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è';
            } else {
                const target = gameState.players.find(p => p.id === vote);
                voteLabel.textContent = `–ø—Ä–æ—Ç–∏–≤: ${target?.name}`;
            }
            
            seat.appendChild(voteLabel);
        }
    });
}

function addVotingTimer(seat) {
    // –ö—Ä—É–≥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ —Ç–∞–π–º–µ—Ä–∞
    const timerRing = document.createElement('div');
    timerRing.className = 'voting-timer-ring';
    seat.appendChild(timerRing);
    
    // –¢–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
    const timerText = document.createElement('div');
    timerText.className = 'voting-timer-text';
    seat.appendChild(timerText);
    
    updateTimerRing(timerRing, timerText);
}

function updateVisualTimer() {
    // –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä—É–≥–æ–≤–æ–π —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    const currentVoterId = gameState.voting.order[gameState.voting.currentVoterIdx];
    const currentVoter = gameState.players.find(p => p.id === currentVoterId);
    if (currentVoter) {
        const seat = document.querySelector(`[data-seat-number="${currentVoter.seatNumber}"]`);
        if (seat) {
            const ring = seat.querySelector('.voting-timer-ring');
            const text = seat.querySelector('.voting-timer-text');
            if (ring && text) {
                updateTimerRing(ring, text);
            }
            
            // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–µ–∫—É–Ω–¥–∞—Ö
            if (gameState.voting.timer.remainingMs <= 10000 && gameState.voting.timer.remainingMs > 0) {
                seat.classList.add('voting-timer-warning');
            }
        }
    }
}

function updateTimerRing(ring, text) {
    if (!ring || !text) return;
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º endTime
    const totalDuration = gameState.voting.timer.endTime ? 
        (gameState.voting.timer.endTime - gameState.voting.timer.startedAt) : 120000;
    const progress = Math.max(0, gameState.voting.timer.remainingMs / totalDuration);
    const timeStr = formatTime(gameState.voting.timer.remainingMs);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–æ–ª—å—Ü–∞ –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É
    let color;
    if (progress > 0.5) {
        const ratio = (progress - 0.5) * 2;
        color = `rgb(${Math.round(255 * (1 - ratio))}, 255, 0)`;
    } else {
        const ratio = progress * 2;
        color = `rgb(255, ${Math.round(255 * ratio)}, 0)`;
    }
    
    const degrees = progress * 360;
    ring.style.background = `conic-gradient(from 0deg, ${color} ${degrees}deg, rgba(255,255,255,0.1) ${degrees}deg)`;
    
    text.textContent = timeStr;
}

function formatTime(ms) {
    const totalSeconds = Math.ceil(ms / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function startNight() {
    gameState.nightNumber++;
    setGamePhase('night');
    addLogEntry('–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞', `–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å ${gameState.nightNumber}`);
    updateCenterPanel();
    updatePlayerTable();
}

function highlightCurrentPlayer() {
    // Remove current class from all players
    document.querySelectorAll('.player-seat').forEach(seat => {
        seat.classList.remove('current');
    });
    
    // Add current class to active player during introduction
    const currentPlayer = getPlayerBySeat(gameState.orderIndex + 1);
    if (currentPlayer && gameState.phase === 'introduction') {
        const seat = document.querySelector(`[data-player-id="${currentPlayer.id}"]`);
        if (seat) {
            seat.classList.add('current');
        }
    }
}

// Bottom control functions
function stepBack() {
    if (gameState.log.length === 0) return;
    
    // For now, just show previous log entry
    const lastEntry = gameState.log[gameState.log.length - 1];
    addLogEntry('–®–∞–≥ –Ω–∞–∑–∞–¥', `–û—Ç–º–µ–Ω–µ–Ω–æ: ${lastEntry.action}`);
}

function stepForward() {
    // Move to next logical phase based on current state
    switch (gameState.phase) {
        case 'setup':
            if (gameState.players.length >= 4) {
                showSection('gameSetup');
            }
            break;
        case 'preparation':
            startIntroduction();
            break;
        case 'introduction':
            playerIntroduced();
            break;
        case 'firstNight':
            mafiaIntroduced();
            break;
        case 'day':
            startVoting();
            break;
        case 'voting':
            skipVote();
            break;
        case 'night':
            // For now, skip to results
            setGamePhase('results');
            break;
        case 'results':
            startNewDay();
            break;
    }
}



function togglePause() {
    const gameTable = document.getElementById('gameTable');
    const pauseBtn = document.getElementById('pauseBtn');
    
    if (gameTable && pauseBtn) {
        if (gameTable.classList.contains('game-paused')) {
            gameTable.classList.remove('game-paused');
            pauseBtn.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞';
            addLogEntry('–ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', '');
        } else {
            gameTable.classList.add('game-paused');
            pauseBtn.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
            addLogEntry('–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '');
        }
    }
}

function toggleLog() {
    const logContent = document.getElementById('logContent');
    const logToggle = document.querySelector('.log-toggle');
    
    if (logContent && logToggle) {
        if (logContent.style.display === 'none') {
            logContent.style.display = 'block';
            logToggle.textContent = '_';
        } else {
            logContent.style.display = 'none';
            logToggle.textContent = '+';
        }
    }
}

function showRules() {
    // Create a popup with rules
    const rulesModal = document.createElement('div');
    rulesModal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;
    
    rulesModal.innerHTML = `
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            padding: 30px;
            max-width: 400px;
            color: white;
            text-align: center;
        ">
            <h2>üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h2>
            <p>–ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ú–∞—Ñ–∏–∏:</p>
            <ul style="text-align: left; margin: 20px 0;">
                <li>–î–µ–Ω—å: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</li>
                <li>–ù–æ—á—å: –º–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É</li>
                <li>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –Ω–æ—á—å—é</li>
                <li>–¶–µ–ª—å –º–∏—Ä–Ω—ã—Ö: –Ω–∞–π—Ç–∏ –≤—Å—é –º–∞—Ñ–∏—é</li>
                <li>–¶–µ–ª—å –º–∞—Ñ–∏–∏: —Å—Ç–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º</li>
            </ul>
            <button onclick="this.parentElement.parentElement.remove()" 
                style="
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    padding: 10px 20px;
                    border-radius: 20px;
                    cursor: pointer;
                ">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        </div>
    `;
    
    document.body.appendChild(rulesModal);
}

function saveLog() {
    const logText = gameState.log.map(entry => 
        `[${entry.timestamp}] ${entry.action}${entry.details ? ': ' + entry.details : ''}`
    ).join('\n');
    
    const blob = new Blob([logText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `mafia-game-log-${new Date().toISOString().slice(0,10)}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    
    addLogEntry('–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
}



function startNewDay() {
    gameState.dayNumber++;
    gameState.nightNumber++;
    setGamePhase('day');
    addLogEntry('–ù–æ–≤—ã–π –¥–µ–Ω—å', `–ù–∞—á–∞–ª—Å—è –¥–µ–Ω—å ${gameState.dayNumber}`);
}

// Load game data from Telegram WebApp
function loadGameData() {
    const urlParams = new URLSearchParams(window.location.search);
    const eventId = urlParams.get('eventId');
    
    if (eventId) {
        fetchGameData(eventId);
    } else {
        // Demo mode
        updateUI();
    }
    
    // Initialize roles settings
    renderRolesSettings();
}

// Fetch game data from server
async function fetchGameData(eventId) {
    try {
        const response = await fetch(`/api/balagan/game/${eventId}`);
        if (response.ok) {
            const data = await response.json();
            gameState.players = data.players || [];
            gameState.phase = data.phase || 'setup';
            gameState.isActive = data.isActive || false;
            updateUI();
            addHistoryEntry(`üì• –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Å–æ–±—ã—Ç–∏–µ ${eventId})`);
        }
    } catch (error) {
        console.error('Error loading game data:', error);
        addHistoryEntry('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã');
    }
}

// UI Management
// Dynamic roles UI functions
function renderRolesSettings() {
    const wrap = document.getElementById('roles-settings');
    if (!wrap) return;
    
    wrap.innerHTML = '';

    ROLES.filter(r => r.ui).forEach(role => {
        const id = `role_${role.key}`;
        const label = document.createElement('label');
        label.className = 'role-toggle';

        const input = document.createElement('input');
        input.type = 'checkbox';
        input.id = id;
        input.checked = !!role.defaultOn;

        input.addEventListener('change', () => {
            gameState.enabledRoles[role.key] = input.checked;
        });

        const span = document.createElement('span');
        span.textContent = role.label;

        label.appendChild(input);
        label.appendChild(span);
        wrap.appendChild(label);
    });

    // –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ enabledRoles
    gameState.enabledRoles = {};
    ROLES.filter(r => r.ui).forEach(r => gameState.enabledRoles[r.key] = !!r.defaultOn);
}

function readEnabledRolesFromUI() {
    ROLES.filter(r => r.ui).forEach(r => {
        const el = document.getElementById(`role_${r.key}`);
        if (el) gameState.enabledRoles[r.key] = el.checked;
    });
}

function afterRolesAssigned() {
    gameState.initialMafiaCount = gameState.players.filter(p =>
        ['mafia','don','consigliere'].includes(p.role)
    ).length;
    gameState.consigliereUsed = false;
    gameState.kamikazeUsed = false;
}

// Show/hide sections
function showSection(sectionId) {
    // Hide all sections
    document.querySelectorAll('.section, .game-table-container, .main-menu').forEach(el => {
        el.style.display = 'none';
    });
    
    // Show requested section
    if (sectionId === 'game') {
        document.getElementById('gameTable').style.display = 'flex';
    } else if (sectionId === 'menu') {
        document.getElementById('mainMenu').style.display = 'block';
    } else {
        const sectionMap = {
            'players': 'playersSection',
            'gameSetup': 'gameSetupSection',
            'rules': 'rulesSection',
            'history': 'historySection'
        };
        const element = document.getElementById(sectionMap[sectionId]);
        if (element) element.style.display = 'block';
    }
    
    if (sectionId === 'players') {
        updatePlayersList();
    } else if (sectionId === 'history') {
        updateHistoryDisplay();
    } else if (sectionId === 'gameSetup') {
        renderRolesSettings();
    }
}

function showMainMenu() {
    showSection('menu');
}

function updateUI() {
    updatePhaseDisplay();
    updateGameStats();
    updatePlayerTable();
    updateCenterPanel();
    updateBottomControls();
    updateLogDisplay();
}

function updateGameStatus() {
    const phaseIndicator = document.getElementById('phaseIndicator');
    const playerCount = document.getElementById('playerCount');
    const currentPhase = document.getElementById('currentPhase');
    const aliveCount = document.getElementById('aliveCount');
    const mafiaAlive = document.getElementById('mafiaAlive');
    
    const phaseNames = {
        setup: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
        day: `–î–µ–Ω—å ${gameState.dayNumber}`,
        night: `–ù–æ—á—å ${gameState.dayNumber}`,
        voting: `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –î–µ–Ω—å ${gameState.dayNumber}`,
        finished: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    
    if (phaseIndicator) phaseIndicator.textContent = phaseNames[gameState.phase] || gameState.phase;
    if (playerCount) playerCount.textContent = gameState.players.length;
    if (currentPhase) currentPhase.textContent = phaseNames[gameState.phase] || gameState.phase;
    
    const alivePlayers = gameState.players.filter(p => p.status === 'alive');
    const aliveMafia = alivePlayers.filter(p => p.role && (p.role === 'mafia' || p.role === 'don' || p.role === 'consigliere'));
    
    if (aliveCount) aliveCount.textContent = alivePlayers.length;
    if (mafiaAlive) mafiaAlive.textContent = aliveMafia.length;
}

// Player Management
function addPlayer() {
    const nameInput = document.getElementById('playerName');
    const usernameInput = document.getElementById('playerUsername');
    const seatInput = document.getElementById('seatNumber');
    
    const name = nameInput.value.trim();
    const username = usernameInput.value.trim();
    const seatNumber = parseInt(seatInput.value);
    
    if (!name) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!');
        return;
    }
    
    if (!seatNumber || seatNumber < 1 || seatNumber > 20) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –æ—Ç 1 –¥–æ 20!');
        return;
    }
    
    // Check if seat is taken
    if (gameState.players.some(p => p.seatNumber === seatNumber)) {
        alert('–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ!');
        return;
    }
    
    const player = {
        id: Date.now(),
        name: name,
        username: username,
        telegramId: document.getElementById('telegramId').value.trim(),
        seatNumber: seatNumber,
        role: null,
        status: 'alive',
        actions: []
    };
    
    gameState.players.push(player);
    gameState.players.sort((a, b) => a.seatNumber - b.seatNumber);
    
    // Clear inputs
    nameInput.value = '';
    usernameInput.value = '';
    document.getElementById('telegramId').value = '';
    seatInput.value = '';
    
    updatePlayersList();
    updateUI();
    addHistoryEntry(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: ${name} (–º–µ—Å—Ç–æ ${seatNumber})`);
    updateGameInstructions();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
}

function removePlayer(playerId) {
    const playerIndex = gameState.players.findIndex(p => p.id === playerId);
    if (playerIndex !== -1) {
        const player = gameState.players[playerIndex];
        gameState.players.splice(playerIndex, 1);
        updatePlayersList();
        updateUI();
        addHistoryEntry(`‚ûñ –£–¥–∞–ª–µ–Ω –∏–≥—Ä–æ–∫: ${player.name}`);
        updateGameInstructions();
    }
}

function updatePlayersList() {
    const playersList = document.getElementById('playersList');
    if (!playersList) return;
    
    if (gameState.players.length === 0) {
        playersList.innerHTML = '<p style="text-align: center; color: rgba(255,255,255,0.6); padding: 20px;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>';
        return;
    }
    
    playersList.innerHTML = gameState.players.map(player => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayName = player.nickname || player.displayName || player.name;
        const realNameInfo = player.realName ? ` (${player.realName})` : '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        let avatarContent = displayName.charAt(0).toUpperCase();
        if (player.avatarUrl) {
            avatarContent = `<img src="${player.avatarUrl}" 
                             style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                             onerror="this.outerHTML='${displayName.charAt(0).toUpperCase()}';" 
                             alt="${displayName}">`;
        } else if (player.telegramId) {
            avatarContent = `<img src="https://t.me/i/userpic/160/${player.username || player.telegramId}.jpg" 
                             style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                             onerror="this.outerHTML='${displayName.charAt(0).toUpperCase()}';" 
                             alt="${displayName}">`;
        }
        
        return `
            <div class="player-item ${player.status === 'dead' ? 'dead-player' : ''}">
                <div class="player-info">
                    <div class="player-avatar">${avatarContent}</div>
                    <div class="player-details">
                        <h4>${displayName}${realNameInfo} ${player.status === 'dead' ? 'üíÄ' : ''}</h4>
                        <p>–ú–µ—Å—Ç–æ: ${player.seatNumber} ${player.username ? `| @${player.username}` : ''}</p>
                        ${player.telegramId ? `<p>ID: ${player.telegramId}</p>` : ''}
                        ${player.role ? `<p>–†–æ–ª—å: ${roleDefinitions[player.role]?.name}</p>` : ''}
                        <p>–°—Ç–∞—Ç—É—Å: ${player.status === 'alive' ? '‚úÖ –ñ–∏–≤' : 'üíÄ –ú–µ—Ä—Ç–≤'}</p>
                    </div>
                </div>
                <div class="player-actions">
                    <button class="status-btn ${player.status === 'alive' ? 'kill-btn' : 'revive-btn'}" 
                            onclick="togglePlayerStatus(${player.id})">
                        ${player.status === 'alive' ? 'üíÄ –£–±–∏—Ç—å' : 'üíö –í–µ—Ä–Ω—É—Ç—å'}
                    </button>
                    <button class="remove-btn" onclick="removePlayer(${player.id})">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }).join('');
}

// Role Assignment
function assignRoles() {
    if (gameState.players.length < 4) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!');
        return;
    }
    
    // Read enabled roles from UI
    readEnabledRolesFromUI();
    
    // Get game mode
    const gameModeRadios = document.getElementsByName('gameMode');
    gameState.gameMode = Array.from(gameModeRadios).find(r => r.checked)?.value || 'hidden';
    
    // Assign roles
    const roles = calculateRoles(gameState.players.length);
    const shuffledPlayers = [...gameState.players].sort(() => Math.random() - 0.5);
    
    for (let i = 0; i < shuffledPlayers.length; i++) {
        shuffledPlayers[i].role = roles[i];
        shuffledPlayers[i].status = 'alive';
    }
    
    // Fix initial mafia count and reset single-use abilities
    afterRolesAssigned();
    
    gameState.phase = 'day';
    gameState.dayNumber = 1;
    gameState.isActive = true;
    
    // Send roles to players (if connected to Telegram bot)
    sendRolesToPlayers();
    
    // Create game ID if needed and schedule save
    if (!gameState.id) {
        createNewGame();
    } else {
        scheduleSave();
    }
    
    updateUI();
    showSection('game');
    addLogEntry('–†–æ–ª–∏ —Ä–∞–∑–¥–∞–Ω—ã', '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
    
    if (gameState.settings.gameMode === 'open') {
        addLogEntry('–†–µ–∂–∏–º –∏–≥—Ä—ã', '–û—Ç–∫—Ä—ã—Ç—ã–µ —Ä–æ–ª–∏');
    } else {
        addLogEntry('–†–µ–∂–∏–º –∏–≥—Ä—ã', '–°–∫—Ä—ã—Ç—ã–µ —Ä–æ–ª–∏');
    }
    
    setGamePhase('preparation');
}

function calculateRoles(playerCount) {
    const roles = [];

    // 1) —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª –º–∞—Ñ–∏–∏ (~—Ç—Ä–µ—Ç—å —Å—Ç–æ–ª–∞)
    let mafiaPool = Math.max(1, Math.floor(playerCount / 3));

    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–∞—Ñ-—Ä–æ–ª–µ–π (–¥–æ–Ω/–∫–æ–Ω—Å–∏–ª—å–µ—Ä–∏) ‚Äî –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    const mafiaSpecials = ['don','consigliere'].filter(k => gameState.enabledRoles[k]);
    mafiaSpecials.forEach(k => {
        if (mafiaPool > 0) { roles.push(k); mafiaPool--; }
    });

    // –¥–æ–±–∏—Ç—å –ø—É–ª –æ–±—ã—á–Ω–æ–π –º–∞—Ñ–∏–µ–π
    while (mafiaPool-- > 0) roles.push('mafia');

    // 2) —Å–ø–µ—Ü-—Ä–æ–ª–∏ (–∫—Ä–æ–º–µ ¬´–º–∞—Ñ–∏–∏¬ª –∏ ¬´–º–∏—Ä–Ω–æ–≥–æ¬ª)
    ROLES.forEach(r => {
        if (!r.ui) return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ç—É–º–±–ª–µ—Ä—ã (mafia/civilian)
        if (['don','consigliere'].includes(r.key)) return; // —É–∂–µ —É—á–ª–∏
        if (gameState.enabledRoles[r.key]) roles.push(r.key);
    });

    // 3) –¥–æ–±–∏–≤–∞–µ–º –º–∏—Ä–Ω—ã–º–∏
    while (roles.length < playerCount) roles.push('civilian');

    // –ø–µ—Ä–µ–º–µ—à–∞–µ–º
    roles.sort(() => Math.random() - 0.5);
    return roles;
}

async function sendRolesToPlayers() {
    try {
        const response = await fetch('/api/send-roles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                players: gameState.players,
                gameTitle: 'Mafia Game'
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.sent > 0) {
                addLogEntry('–†–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', `–£—Å–ø–µ—à–Ω–æ: ${result.sent}, –æ—à–∏–±–æ–∫: ${result.errors}`);
            } else {
                addLogEntry('–†–æ–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', '–ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
            }
            console.log('‚úÖ Roles sent to players:', result);
        } else {
            addLogEntry('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
            console.error('‚ùå Failed to send roles');
        }
    } catch (error) {
        console.error('Error sending roles:', error);
        addLogEntry('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–µ–π');
    }
}

// Player Table Management
function updatePlayerTable() {
    const playerSeats = document.getElementById('playerSeats');
    if (!playerSeats) return;
    
    playerSeats.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ –ø–ª—é—Å –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const occupiedSeats = gameState.players.length;
    const totalSeats = Math.max(occupiedSeats + 1, 8); // –º–∏–Ω–∏–º—É–º 8 –º–µ—Å—Ç
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    for (let i = 1; i <= totalSeats; i++) {
        const player = gameState.players.find(p => p.seatNumber === i);
        const seat = document.createElement('div');
        seat.className = 'player-seat';
        seat.dataset.seatNumber = i;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–æ–∫—Ä—É–≥ –æ–≤–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
        const angle = ((i - 1) / totalSeats) * 2 * Math.PI - Math.PI / 2;
        const radiusX = 360; // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
        const radiusY = 260; // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
        const x = 350 + radiusX * Math.cos(angle);
        const y = 250 + radiusY * Math.sin(angle);
        
        // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
        seat.style.left = `${x - 30}px`;
        seat.style.top = `${y - 30}px`;
        seat.style.position = 'absolute';
        seat.style.width = '60px';
        seat.style.height = '60px';
        
        if (player) {
            seat.dataset.playerId = player.id;
            seat.classList.add(player.status);
            
            // Add role class for night highlighting
            if (player.role) {
                seat.classList.add(player.role);
            }
            
            const roleInfo = player.role ? roleDefinitions[player.role] : null;
            const showRole = gameState.settings.gameMode === 'open' || gameState.phase === 'finished';
            
            // Role badge positioned on avatar - only show in open mode or when game finished
            let roleBadge = '';
            if (roleInfo && showRole) {
                roleBadge = `<div class="role-badge" style="
                    position: absolute;
                    top: -5px;
                    right: -5px;
                    background: var(--role-${player.role}, #666);
                    border-radius: 50%;
                    width: 16px;
                    height: 16px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 8px;
                    border: 1px solid white;
                    box-shadow: 0 1px 2px rgba(0,0,0,0.3);
                    z-index: 5;
                ">${roleInfo.emoji}</div>`;
            }
            
            // Create avatar content - prioritize avatarUrl from registration, fallback to Telegram
            let avatarContent = 'üë§'; // Default fallback
            if (player.avatarUrl) {
                // Use uploaded avatar from registration
                avatarContent = `<img src="${player.avatarUrl}" 
                                 style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                                 onerror="this.style.display='none'; this.parentElement.innerHTML='üë§' + (this.parentElement.querySelector('.role-badge')?.outerHTML || '');"
                                 alt="${player.displayName || player.name}">`;
            } else if (player.telegramId) {
                // Fallback to Telegram avatar
                avatarContent = `<img src="https://t.me/i/userpic/160/${player.username || player.telegramId}.jpg" 
                                 style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;" 
                                 onerror="this.style.display='none'; this.parentElement.innerHTML='üë§' + (this.parentElement.querySelector('.role-badge')?.outerHTML || '');"
                                 alt="${player.displayName || player.name}">`;
            }
            
            seat.innerHTML = `
                <div class="player-avatar" style="position: relative; width: 100%; height: 100%;">
                    ${avatarContent}
                    ${roleBadge}
                </div>
            `;
            
            // Create name element outside the seat
            const existingNameElement = playerSeats.querySelector(`[data-name-for="${player.id}"]`);
            if (existingNameElement) {
                existingNameElement.remove();
            }
            
            const nameElement = document.createElement('div');
            nameElement.className = 'player-name-external';
            nameElement.setAttribute('data-name-for', player.id);
            
            // Show nickname from registration if available, otherwise display name or username
            const displayText = player.nickname || player.displayName || player.name;
            nameElement.textContent = displayText.length > 8 ? displayText.substring(0, 8) + '...' : displayText;
            
            // Position name below the seat using seat's position
            nameElement.style.position = 'absolute';
            nameElement.style.left = seat.style.left;
            nameElement.style.top = seat.style.top;
            nameElement.style.transform = 'translateX(-50%) translateY(68px)';
            nameElement.style.marginLeft = '30px';
            
            playerSeats.appendChild(nameElement);
            
            seat.onclick = () => handlePlayerClick(player.id);
            
            // Add special state classes for night phase
            updatePlayerNightStates(seat, player);
            
            // Update player display and badges
            updatePlayerDisplay(player);
            
            // Apply avatar color based on current phase
            if (gameState.phase === 'night' || gameState.phase === 'firstNight') {
                if (player.role && player.status === 'alive') {
                    seat.classList.add(player.role);
                }
            }
        } else {
            seat.classList.add('empty');
            seat.innerHTML = `
                <div class="seat-number">${i}</div>
                <div class="player-name">–ü—É—Å—Ç–æ</div>
            `;
        }
        
        playerSeats.appendChild(seat);
    }
    
    // Apply night phase styling to table container
    updateNightPhaseHighlighting();
}

function selectPlayer(playerId) {
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => seat.classList.remove('selected'));
    
    const player = gameState.players.find(p => p.id === playerId);
    if (player && player.status === 'alive') {
        const seat = document.querySelector(`[data-seat-number="${player.seatNumber}"]`);
        if (seat) {
            seat.classList.add('selected');
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∏–≥—Ä–æ–∫–∞–º —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function handlePlayerClick(playerId) {
    console.log('–ö–ª–∏–∫ –ø–æ –∏–≥—Ä–æ–∫—É:', playerId);
    console.log('–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:', gameState.phase);
    
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) {
        console.log('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // Visual voting - cast vote
    if (gameState.phase === 'voting' && gameState.voting.isActive) {
        handleVoteClick(playerId);
        return;
    }
    
    // Night phase - select target for NEW night action system
    if (gameState.phase === 'night' && gameState.currentNightRole) {
        if (player.status !== 'alive') {
            console.log('–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä—Ç–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return;
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        selectTarget(playerId);
        return;
    } 
    else {
        // –£–ë–ò–†–ê–ï–ú popup –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (gameState.phase === 'night') {
            console.log('Night phase: no popup, using center interface only');
            return;
        }
        // General player selection - show management controls only for non-night phases
        selectedPlayerId = playerId;
        selectPlayer(playerId);
        showPlayerManagementPopup(player);
    }
}



function selectNightTarget(targetId) {
    const targetPlayer = gameState.players.find(p => p.id === targetId);
    if (!targetPlayer) return;
    
    const currentRole = gameState.currentNightRole;
    if (!currentRole) return;
    
    const roleInfo = roleDefinitions[currentRole];
    
    // Check role-specific restrictions
    switch (currentRole) {
        case 'mafia':
        case 'don':
            if (targetPlayer.role === 'mafia' || targetPlayer.role === 'don') {
                alert('–ú–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç —É–±–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É!');
                return;
            }
            // Execute kill
            updatePlayerStatus(targetId, 'dead', `–£–±–∏—Ç ${roleInfo?.name || currentRole}`);
            addLogEntry('–ù–æ—á–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ', `${roleInfo?.name || currentRole} —É–±–∏–≤–∞–µ—Ç ${targetPlayer.name}`);
            break;
            
        case 'commissar':
            // Check player
            const isMafia = targetPlayer.role === 'mafia' || targetPlayer.role === 'don';
            markPlayerChecked(targetId, true);
            addLogEntry('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–æ–º–∏—Å—Å–∞—Ä–∞', `${targetPlayer.name} - ${isMafia ? '–ú–ê–§–ò–Ø' : '–ù–ï –ú–ê–§–ò–Ø'}`);
            break;
            
        case 'doctor':
            // Heal/protect player
            markPlayerProtected(targetId, true);
            addLogEntry('–õ–µ—á–µ–Ω–∏–µ', `–î–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç ${targetPlayer.name}`);
            break;
            
        case 'lover':
            // Block player for the night
            markPlayerProtected(targetId, true);
            addLogEntry('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', `–õ—é–±–æ–≤–Ω–∏—Ü–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç ${targetPlayer.name}`);
            break;
            
        case 'maniac':
            // Maniac kill
            updatePlayerStatus(targetId, 'dead', '–£–±–∏—Ç –º–∞–Ω—å—è–∫–æ–º');
            addLogEntry('–£–±–∏–π—Å—Ç–≤–æ –º–∞–Ω—å—è–∫–∞', `–ú–∞–Ω—å—è–∫ —É–±–∏–≤–∞–µ—Ç ${targetPlayer.name}`);
            break;
            
        case 'bomber':
            // Mine player
            markPlayerMined(targetId, true);
            addLogEntry('–ú–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', `–ü–æ–¥—Ä—ã–≤–Ω–∏–∫ –º–∏–Ω–∏—Ä—É–µ—Ç ${targetPlayer.name}`);
            break;
            
        default:
            addLogEntry('–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', `${roleInfo?.name || currentRole} –≤—ã–±—Ä–∞–ª ${targetPlayer.name}`);
    }
    
    // Store the action
    if (!gameState.nightActions) gameState.nightActions = {};
    gameState.nightActions[currentRole + 'Target'] = targetId;
    
    // Clear active role and update UI
    clearActiveNightRole();
    updateCenterPanel();
    updatePlayerTable();
}

function showPlayerManagementPopup(player) {
    // Remove any existing popups
    document.querySelectorAll('.player-management-popup').forEach(popup => popup.remove());
    
    // Create management popup
    const popup = document.createElement('div');
    popup.className = 'player-management-popup';
    popup.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        padding: 20px;
        color: white;
        z-index: 1000;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        max-width: 300px;
    `;
    
    const roleInfo = player.role ? roleDefinitions[player.role] : null;
    const statusText = player.status === 'alive' ? 'üü¢ –ñ–∏–≤' : 'üíÄ –ú–µ—Ä—Ç–≤';
    
    let nightActions = '';
    if ((gameState.phase === 'night' || gameState.phase === 'firstNight') && player.status === 'alive') {
        nightActions = `
            <div style="margin: 15px 0; padding: 10px; background: rgba(0,0,0,0.3); border-radius: 10px;">
                <h4 style="margin-bottom: 10px;">–ù–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</h4>
                <button onclick="markPlayerProtected(${player.id}, !${player.effects?.protected || false}); this.parentElement.parentElement.parentElement.remove();" 
                        style="background: var(--role-lover); color: white; border: none; padding: 8px 12px; border-radius: 8px; margin: 2px; cursor: pointer; font-size: 12px;">
                    ${player.effects?.protected ? '‚ùå –°–Ω—è—Ç—å –∑–∞—â–∏—Ç—É' : 'üíã –ó–∞—â–∏—Ç–∏—Ç—å'}
                </button>
                <button onclick="markPlayerMined(${player.id}, !${player.effects?.mined || false}); this.parentElement.parentElement.parentElement.remove();" 
                        style="background: var(--role-bomber); color: white; border: none; padding: 8px 12px; border-radius: 8px; margin: 2px; cursor: pointer; font-size: 12px;">
                    ${player.effects?.mined ? '‚ùå –°–Ω—è—Ç—å –º–∏–Ω—É' : 'üí£ –ó–∞–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
                <button onclick="markPlayerChecked(${player.id}, !${player.effects?.checked || false}); this.parentElement.parentElement.parentElement.remove();" 
                        style="background: var(--role-commissar); color: white; border: none; padding: 8px 12px; border-radius: 8px; margin: 2px; cursor: pointer; font-size: 12px;">
                    ${player.effects?.checked ? '‚ùå –°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É' : 'üîé –ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º'}
                </button>
            </div>
        `;
    }
    
    popup.innerHTML = `
        <h3>${player.name}</h3>
        <p>${roleInfo ? `${roleInfo.emoji} ${roleInfo.name}` : 'üé≠ –ù–µ—Ç —Ä–æ–ª–∏'}</p>
        <p>${statusText}</p>
        ${nightActions}
        <div style="margin-top: 15px;">
            ${player.status === 'alive' ? 
                '<button onclick="eliminatePlayer(' + player.id + ')" style="background: #ff6b6b; color: white; border: none; padding: 10px 15px; border-radius: 10px; margin: 5px; cursor: pointer;">üíÄ –ò—Å–∫–ª—é—á–∏—Ç—å</button>' :
                '<button onclick="revivePlayer(' + player.id + ')" style="background: #2ed573; color: white; border: none; padding: 10px 15px; border-radius: 10px; margin: 5px; cursor: pointer;">‚ú® –í–µ—Ä–Ω—É—Ç—å</button>'
            }
            <button onclick="this.remove()" style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 10px 15px; border-radius: 10px; margin: 5px; cursor: pointer;">‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    
    document.body.appendChild(popup);
    
    // Auto-close popup after 10 seconds
    setTimeout(() => {
        if (popup.parentNode) popup.remove();
    }, 10000);
}

function eliminatePlayer(playerId) {
    updatePlayerStatus(playerId, 'eliminated', '–ò—Å–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é');
    // Remove popup
    document.querySelectorAll('[style*="fixed"]').forEach(el => {
        if (el.innerHTML.includes('–ò—Å–∫–ª—é—á–∏—Ç—å') || el.innerHTML.includes('–í–µ—Ä–Ω—É—Ç—å')) {
            el.remove();
        }
    });
}

function revivePlayer(playerId) {
    updatePlayerStatus(playerId, 'alive', '–í–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–≥—Ä—É');
    // Remove popup
    document.querySelectorAll('[style*="fixed"]').forEach(el => {
        if (el.innerHTML.includes('–ò—Å–∫–ª—é—á–∏—Ç—å') || el.innerHTML.includes('–í–µ—Ä–Ω—É—Ç—å')) {
            el.remove();
        }
    });
}

// Night phase highlighting functions
function updateNightPhaseHighlighting() {
    const gameTable = document.querySelector('.game-table-container');
    if (!gameTable) {
        // If no container found, try the main table
        const mainTable = document.getElementById('gameTable');
        if (mainTable) {
            mainTable.classList.toggle('night-phase', gameState.phase === 'night' || gameState.phase === 'firstNight');
        }
        return;
    }
    
    // Add or remove night-phase class based on current phase
    if (gameState.phase === 'night' || gameState.phase === 'firstNight') {
        gameTable.classList.add('night-phase');
        // Special highlighting for first night: show only mafia roles
        if (gameState.phase === 'firstNight') {
            gameTable.classList.add('mafia-intro');
        } else {
            gameTable.classList.remove('mafia-intro');
        }
        console.log('üåô Night phase highlighting activated');
    } else {
        gameTable.classList.remove('night-phase');
        gameTable.classList.remove('mafia-intro');
        console.log('‚òÄÔ∏è Night phase highlighting deactivated');
    }
}

function updatePlayerNightStates(seatElement, player) {
    if (!seatElement || !player) return;
    
    // Clear previous state classes
    seatElement.classList.remove('active-role', 'target-selectable', 'protected', 'mined', 'checked');
    
    // Add active role highlighting if this player's role is currently acting
    if (gameState.phase === 'night' && gameState.currentNightRole === player.role) {
        seatElement.classList.add('active-role');
    }
    
    // Add target selection highlighting for night actions
    if (gameState.phase === 'night' && gameState.currentNightRole && player.status === 'alive' && player.role !== gameState.currentNightRole) {
        seatElement.classList.add('target-selectable');
    }
    
    // Add status badges based on night effects
    updatePlayerBadges(seatElement, player);
}

function updatePlayerBadges(seatElement, player) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ seatElement —ç—Ç–æ DOM —ç–ª–µ–º–µ–Ω—Ç
    if (!seatElement || typeof seatElement.querySelectorAll !== 'function') {
        console.error('updatePlayerBadges: seatElement –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º', seatElement);
        return;
    }
    
    // Remove existing badges
    const existingBadges = seatElement.querySelectorAll('.player-badge');
    existingBadges.forEach(badge => badge.remove());
    
    // Add badges based on player states
    const badges = [];
    
    // Protection by lover
    if (player.effects && player.effects.protected) {
        badges.push({ type: 'protected', emoji: 'üíã', tooltip: '–ó–∞—â–∏—â–µ–Ω –õ—é–±–æ–≤–Ω–∏—Ü–µ–π' });
    }
    
    // Mined by bomber
    if (player.effects && player.effects.mined) {
        badges.push({ type: 'mined', emoji: 'üí£', tooltip: '–ó–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω' });
    }
    
    // Checked by commissar
    if (player.effects && player.effects.checked) {
        badges.push({ type: 'checked', emoji: 'üîé', tooltip: '–ü—Ä–æ–≤–µ—Ä–µ–Ω –ö–æ–º–∏—Å—Å–∞—Ä–æ–º' });
    }
    
    // Create badge elements
    badges.forEach((badgeData, index) => {
        const badge = document.createElement('div');
        badge.className = `player-badge ${badgeData.type}`;
        badge.textContent = badgeData.emoji;
        badge.title = badgeData.tooltip;
        
        // Position badges in different corners to avoid overlap
        switch (index) {
            case 0:
                badge.style.top = '-3px';
                badge.style.right = '-3px';
                break;
            case 1:
                badge.style.top = '-3px';
                badge.style.left = '-3px';
                break;
            case 2:
                badge.style.bottom = '-3px';
                badge.style.right = '-3px';
                break;
        }
        
        seatElement.appendChild(badge);
    });
}

function setActiveNightRole(roleType) {
    gameState.currentNightRole = roleType;
    updatePlayerTable();
    addLogEntry('–ù–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', `–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: ${roleDefinitions[roleType]?.name || roleType}`);
}

function clearActiveNightRole() {
    gameState.currentNightRole = null;
    updatePlayerTable();
}

// Quick action functions for night management
function markPlayerProtected(playerId, protect = true) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    if (!player.effects) player.effects = {};
    player.effects.protected = protect;
    
    updatePlayerTable();
    addLogEntry('–ó–∞—â–∏—Ç–∞', `${player.name} ${protect ? '–∑–∞—â–∏—â–µ–Ω' : '—Å–Ω—è—Ç–∞ –∑–∞—â–∏—Ç–∞'}`);
}

function markPlayerMined(playerId, mined = true) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    if (!player.effects) player.effects = {};
    player.effects.mined = mined;
    
    updatePlayerTable();
    addLogEntry('–ú–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', `${player.name} ${mined ? '–∑–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω' : '—Å–Ω—è—Ç–∞ –º–∏–Ω–∞'}`);
}

function markPlayerChecked(playerId, checked = true) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    if (!player.effects) player.effects = {};
    player.effects.checked = checked;
    
    updatePlayerTable();
    addLogEntry('–ü—Ä–æ–≤–µ—Ä–∫–∞', `${player.name} ${checked ? '–ø—Ä–æ–≤–µ—Ä–µ–Ω –ö–æ–º–∏—Å—Å–∞—Ä–æ–º' : '—Å–Ω—è—Ç–∞ –æ—Ç–º–µ—Ç–∫–∞'}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ –∏ –ø–æ–∫–∞–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
function updateSelectedPlayerInfo(player) {
    const selectedPlayerInfo = document.getElementById('selectedPlayerInfo');
    const killBtn = document.getElementById('killBtn');
    const reviveBtn = document.getElementById('reviveBtn');
    const popup = document.getElementById('playerControlPopup');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
    if (selectedPlayerInfo && player) {
        const roleInfo = player.role ? roleDefinitions[player.role]?.name || '–ù–µ—Ç —Ä–æ–ª–∏' : '–ù–µ—Ç —Ä–æ–ª–∏';
        const statusText = player.status === 'alive' ? 'üü¢ –ñ–∏–≤' : 'üíÄ –ú–µ—Ä—Ç–≤';
        selectedPlayerInfo.innerHTML = `
            <div>${player.name}</div>
            <div style="font-size: 14px; color: #95a5a6; margin-top: 5px;">${roleInfo} ‚Ä¢ ${statusText}</div>
        `;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
    if (killBtn && reviveBtn && player) {
        if (player.status === 'alive') {
            killBtn.disabled = false;
            killBtn.style.opacity = '1';
            killBtn.style.background = '#ff4757';
            reviveBtn.disabled = true;
            reviveBtn.style.opacity = '0.5';
            reviveBtn.style.background = '#57606f';
        } else {
            killBtn.disabled = true;
            killBtn.style.opacity = '0.5';
            killBtn.style.background = '#57606f';
            reviveBtn.disabled = false;
            reviveBtn.style.opacity = '1';
            reviveBtn.style.background = '#2ed573';
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
    if (popup && player) {
        popup.style.display = 'block';
        console.log('‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è:', player.name);
    }
}

// –£–±–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function killSelectedPlayer() {
    if (!selectedPlayerId) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ!');
        return;
    }
    
    const player = gameState.players.find(p => p.id === selectedPlayerId);
    if (!player) return;
    
    if (player.status === 'dead') {
        alert('–ò–≥—Ä–æ–∫ —É–∂–µ –º–µ—Ä—Ç–≤!');
        return;
    }
    
    togglePlayerStatus(selectedPlayerId);
    closePlayerControl();
}

// –í–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function reviveSelectedPlayer() {
    if (!selectedPlayerId) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ!');
        return;
    }
    
    const player = gameState.players.find(p => p.id === selectedPlayerId);
    if (!player) return;
    
    if (player.status === 'alive') {
        alert('–ò–≥—Ä–æ–∫ —É–∂–µ –∂–∏–≤!');
        return;
    }
    
    togglePlayerStatus(selectedPlayerId);
    closePlayerControl();
}

// –ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
function closePlayerControl() {
    const popup = document.getElementById('playerControlPopup');
    if (popup) {
        popup.style.display = 'none';
        console.log('‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–≤
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => seat.classList.remove('selected'));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    selectedPlayerId = null;
}

// Game Controls
function updateGameControls() {
    const dayBtn = document.getElementById('dayBtn');
    const nightBtn = document.getElementById('nightBtn');
    const voteBtn = document.getElementById('voteBtn');
    
    if (!gameState.isActive) {
        dayBtn.style.display = 'none';
        nightBtn.style.display = 'none';
        voteBtn.style.display = 'none';
        return;
    }
    
    dayBtn.style.display = gameState.phase !== 'day' ? 'inline-block' : 'none';
    nightBtn.style.display = gameState.phase !== 'night' ? 'inline-block' : 'none';
    voteBtn.style.display = gameState.phase === 'day' ? 'inline-block' : 'none';
}

// Game Phases
function startDayPhase() {
    gameState.phase = 'day';
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const nightPanel = document.getElementById('nightPanel');
    if (nightPanel) nightPanel.style.display = 'none';
    
    closeNightHistory(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥–Ω—é
    
    const votingPanel = document.getElementById('votingPanel');
    if (votingPanel) votingPanel.style.display = 'none';
    
    const voteCounter = document.getElementById('voteCounter');
    if (voteCounter) voteCounter.style.display = 'none';
    updateUI();
    addHistoryEntry(`‚òÄÔ∏è –ù–∞—á–∞–ª—Å—è –î–µ–Ω—å ${gameState.dayNumber}`);
    updateGameInstructions();
}

function startNightPhase() {
    console.log('üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã...');
    gameState.phase = 'night';
    gameState.nightActions = [];
    gameState.currentNightRole = null;
    gameState.nightRoleQueue = []; // –û—á–µ—Ä–µ–¥—å —Ä–æ–ª–µ–π –¥–ª—è –Ω–æ—á–∏
    gameState.currentNightRoleIndex = 0;
    
    // –£–ë–ò–†–ê–ï–ú –ª–∏—à–Ω–µ–µ –æ–∫–Ω–æ nightPanel - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ centerPanel
    const nightPanel = document.getElementById('nightPanel');
    if (nightPanel) {
        nightPanel.style.display = 'none';
        console.log('üö´ –ù–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ centerPanel');
    }
    
    // Update night day number
    const nightDayNumber = document.getElementById('nightDayNumber');
    if (nightDayNumber) {
        nightDayNumber.textContent = gameState.dayNumber;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –ø–æ –¢–ó
    initialMafiaCount = gameState.players.filter(p => 
        ['mafia', 'don', 'consigliere'].includes(p.role)
    ).length;
    consigliereUsed = false;
    kamikazeUsed = false;
    bomberMinedIds.clear();
    nightPlan = {
        mafiaTarget: null,
        consigliereTarget: null,
        sheriffTarget: null,
        doctorTarget: null,
        maniacTarget: null,
        loverTarget: null,
        kamikazeTarget: null,
        jailerTarget: null
    };
    
    console.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—á–∏: –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–∞—Ñ–∏–∏=${initialMafiaCount}, –∫–æ–Ω—Å–∏–ª—å–µ—Ä–∏_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω=${consigliereUsed}, –∫–∞–º–∏–∫–∞–¥–∑–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω=${kamikazeUsed}`);
    
    // –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–®–ê–ì–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –í–ú–ï–°–¢–û –í–´–ë–û–†–ê –†–û–õ–ï–ô
    startNightSequence();
    updateUI();
    addLogEntry(`üåô –ù–∞—á–∞–ª–∞—Å—å –ù–æ—á—å ${gameState.dayNumber}`);
    updateGameInstructions();
    
    // –£–ë–ò–†–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–æ—á–Ω—ã—Ö —Ö–æ–¥–æ–≤
}



// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –®–ê–ì–û–í –Ω–æ—á–∏ - –∂–µ—Å—Ç–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
function buildNightSteps(state) {
    const hasAlive = role => state.players.some(p => p.status === 'alive' && !p.jailed && p.role === role);
    
    const steps = [];
    
    // 1) –ú–∞—Ñ–∏—è (–¥–æ–Ω —Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏)
    if (state.players.some(p => p.status === 'alive' && ['mafia','don','consigliere'].includes(p.role))) {
        steps.push({ kind: 'mafia' });
    }
    
    // 2) –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ñ–∏–∏ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π)
    if (canConsigliereAct(state)) {
        steps.push({ kind: 'consigliere' });
    }
    
    // 3) –¢—é—Ä–µ–º—â–∏–∫
    if (hasAlive('jailer')) {
        steps.push({ kind: 'jailer' });
    }
    
    // 4) –ö–æ–º–∏—Å—Å–∞—Ä
    if (hasAlive('sheriff')) {
        steps.push({ kind: 'sheriff' });
    }
    
    // 5) –î–æ–∫—Ç–æ—Ä
    if (hasAlive('doctor')) {
        steps.push({ kind: 'doctor' });
    }
    
    // 6) –ú–∞–Ω—å—è–∫
    if (hasAlive('maniac')) {
        steps.push({ kind: 'maniac' });
    }
    
    // 7) –õ—é–±–æ–≤–Ω–∏—Ü–∞
    if (hasAlive('lover')) {
        steps.push({ kind: 'lover' });
    }
    
    // 8) –ö–∞–º–∏–∫–∞–¥–∑–µ (—Ä–∞–∑–æ–≤–æ)
    if (hasAlive('kamikaze') && !state.kamikazeUsed) {
        steps.push({ kind: 'kamikaze' });
    }
    
    // 9) –ü–æ–¥—Ä—ã–≤–Ω–∏–∫ ‚Äî —à–∞–≥–∞ –Ω–æ—á—å—é –Ω–µ—Ç (–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ)
    // 10) –û–±–æ—Ä–æ—Ç–µ–Ω—å ‚Äî —à–∞–≥–∞ –Ω–æ—á—å—é –Ω–µ—Ç (–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ)
    
    // 11) –ò—Ç–æ–≥–∏
    steps.push({ kind: 'summary' });
    
    return steps;
}

// –ñ—ë—Å—Ç–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function canConsigliereAct(state = gameState) {
    if (!state.enabledRoles || !state.enabledRoles['consigliere']) return false;
    if (state.consigliereUsed) return false;
    const aliveConsig = state.players.some(p => p.status === 'alive' && !p.jailed && p.role === 'consigliere');
    if (!aliveConsig) return false;

    const mafiaAlive = state.players.filter(p => p.status === 'alive' && ['mafia','don','consigliere'].includes(p.role)).length;
    const start = state.initialMafiaCount ?? mafiaAlive;
    return mafiaAlive < start; // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ñ–∏–∏ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ, —á–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–π –¥–ª—è –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏
function validateConsigliereTarget(state, targetId) {
    const t = state.players.find(p => p.id === targetId);
    if (!t || t.status !== 'alive') return { ok: false, reason: '–¶–µ–ª—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞' };
    if (t.role === 'mafia' || t.role === 'don') return { ok: false, reason: '–ù–µ–ª—å–∑—è –≤–µ—Ä–±–æ–≤–∞—Ç—å –º–∞—Ñ–∏—é' };

    // –º–æ–∂–Ω–æ –≤–µ—Ä–±–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –º–∏—Ä–Ω–æ–≥–æ
    const isCivilian = t.role === 'civilian';
    if (!isCivilian) {
        return { ok: true, result: 'fail' }; // –ø—Ä–æ–º–∞—Ö ‚Äî —Å–≥–æ—Ä–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∞
    }
    return { ok: true, result: 'success' };
}

// –§–∏–ª—å—Ç—Ä—ã —Ü–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
function getTargetsForStep(state, stepKind) {
    const isAliveFree = p => p.status === 'alive' && !p.jailed;

    switch (stepKind) {
        case 'mafia':
            // –≤—Å–µ –∂–∏–≤—ã–µ –∏ –Ω–µ –º–∞—Ñ–∏—è, –Ω–µ –≤ —Ç—é—Ä—å–º–µ
            return state.players.filter(p => isAliveFree(p) && p.role !== 'mafia' && p.role !== 'don');

        case 'consigliere':
            if (!canConsigliereAct(state)) return [];
            return state.players.filter(p => p.status === 'alive' && p.role !== 'mafia' && p.role !== 'don');

        case 'jailer':
            // –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–≥–æ –∂–∏–≤–æ–≥–æ
            return state.players.filter(p => p.status === 'alive');

        case 'sheriff':
            // –º–æ–∂–Ω–æ –ª—é–±–æ–≥–æ –∂–∏–≤–æ–≥–æ
            return state.players.filter(p => p.status === 'alive');

        case 'doctor':
            return state.players.filter(p => isAliveFree(p));

        case 'maniac':
            return state.players.filter(p => isAliveFree(p));

        case 'lover':
            return state.players.filter(p => isAliveFree(p));

        case 'kamikaze':
            return state.players.filter(p => isAliveFree(p));

        default:
            return [];
    }
}

// –ù–û–í–ê–Ø –ü–û–®–ê–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–û–ß–ù–´–• –î–ï–ô–°–¢–í–ò–ô
function startNightSequence() {
    // –°–¢–†–û–ì–ê–Ø –§–£–ù–ö–¶–ò–Ø buildNightSteps —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const steps = buildNightSteps(gameState);
    
    gameState.nightRoleQueue = steps.filter(step => step.kind !== 'summary').map(step => step.kind);
    
    gameState.currentNightRoleIndex = 0;
    
    console.log('üåô –û—á–µ—Ä–µ–¥—å –Ω–æ—á–Ω—ã—Ö —Ä–æ–ª–µ–π:', gameState.nightRoleQueue);
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–æ–ª–µ–π –≤ –∏–≥—Ä–µ:', gameState.players.map(p => `${p.name}: ${p.role} (${p.status})`));
    
    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∂–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    console.log('üîç –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —à–∞–≥–∏:', steps);
    steps.forEach(step => {
        const hasRole = gameState.players.some(p => p.status === 'alive' && !p.jailed && p.role === step.kind);
        console.log(`üîç ${step.kind}: –µ—Å—Ç—å_–∂–∏–≤—ã–µ=${hasRole}`);
    });
    
    if (gameState.nightRoleQueue.length > 0) {
        showCurrentNightRole();
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ—á–Ω—ã—Ö —Ä–æ–ª–µ–π, —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å
        console.log('üåô –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ—á–Ω—ã—Ö —Ä–æ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å');
        setTimeout(() => finishNight(), 1000);
    }
}

function showCurrentNightRole() {
    if (gameState.currentNightRoleIndex >= gameState.nightRoleQueue.length) {
        // –í—Å–µ —Ä–æ–ª–∏ –æ—Ç—ã–≥—Ä–∞–ª–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å
        setTimeout(() => finishNight(), 2000);
        return;
    }
    
    const currentRoleKey = gameState.nightRoleQueue[gameState.currentNightRoleIndex];
    const currentRole = nightRoles[currentRoleKey];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!currentRole) {
        console.error(`‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ nightRoles: ${currentRoleKey}`);
        console.error(`‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:`, Object.keys(nightRoles));
        nextNightRole(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Ä–æ–ª—å
        return;
    }
    
    gameState.currentNightRole = currentRoleKey;
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é (–¥–ª—è –º–∞—Ñ–∏–∏ —É—á–∏—Ç—ã–≤–∞–µ–º –∏ –¥–æ–Ω–∞)
    let playersWithRole;
    if (currentRoleKey === 'mafia') {
        playersWithRole = gameState.players.filter(p => 
            (p.role === 'mafia' || p.role === 'don') && p.status === 'alive'
        );
    } else {
        playersWithRole = gameState.players.filter(p => p.role === currentRoleKey && p.status === 'alive');
    }
    
    console.log(`üåô –•–æ–¥ —Ä–æ–ª–∏: ${currentRole.name}`, playersWithRole);
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å, —É–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ nightAction
    selectNightRole(currentRoleKey);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–∞—Ö —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üåô –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: ${currentRole.name}`, playersWithRole);
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Ä–æ–ª—å—é
    highlightActiveRole(currentRoleKey);
}

function highlightActiveRole(roleKey) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => {
        seat.classList.remove('night-active-role', 'night-target-available', 'valid-target');
        seat.style.cursor = '';
        seat.style.opacity = '';
    });
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª—å—é –∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–ª–∏
    gameState.players.forEach(player => {
        const seat = document.querySelector(`[data-seat-number="${player.seatNumber}"]`);
        if (seat) {
            // –î–ª—è –º–∞—Ñ–∏–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∏ –º–∞—Ñ–∏—é –∏ –¥–æ–Ω–∞ –≤–º–µ—Å—Ç–µ
            const isActiveRole = (roleKey === 'mafia') 
                ? (player.role === 'mafia' || player.role === 'don') && player.status === 'alive'
                : player.role === roleKey && player.status === 'alive';
                
            if (isActiveRole) {
                seat.classList.add('night-active-role');
            } else if (player.status === 'alive') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
                const validation = isValidTarget(roleKey, player);
                if (validation.valid) {
                    seat.classList.add('valid-target');
                    seat.style.cursor = 'pointer';
                } else {
                    seat.style.cursor = 'not-allowed';
                    seat.style.opacity = '0.5';
                }
                seat.classList.add('night-target-available');
            }
        }
    });
}

function skipCurrentNightRole() {
    const currentRoleKey = gameState.nightRoleQueue[gameState.currentNightRoleIndex];
    const currentRole = nightRoles[currentRoleKey];
    
    if (currentRole) {
        addLogEntry(`–ü—Ä–æ–ø—É—Å–∫ —Ä–æ–ª–∏`, `${currentRole.name} –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥`);
    } else {
        addLogEntry(`–ü—Ä–æ–ø—É—Å–∫ —Ä–æ–ª–∏`, `${currentRoleKey} –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥`);
    }
    
    nextNightRole();
}

function nextNightRole() {
    gameState.currentNightRoleIndex++;
    selectedTargetId = null;
    
    // –ù–ï —É–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –Ω–æ—á–∏
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => {
        seat.classList.remove('night-active-role', 'night-target-available', 'selected', 'targeted');
        // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π: healed, loved, recruited, checked, blocked, mined, jailed, markedForDeath
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ–ª–∏
    setTimeout(() => {
        showCurrentNightRole();
    }, 1000);
}

function getAvailableNightRoles() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const availableRoles = Object.keys(nightRoles).filter(roleKey => 
        gameState.players.some(p => p.role === roleKey && p.status === 'alive')
    );
    
    console.log('üåô –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ—á–Ω—ã–µ —Ä–æ–ª–∏:', availableRoles);
    console.log('üåô –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:', gameState.players.filter(p => p.status === 'alive').map(p => p.role));
    
    return availableRoles;
}

function selectNightRole(roleKey) {
    gameState.currentNightRole = roleKey;
    const role = nightRoles[roleKey];
    
    console.log(`üåô –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–ª–∏: ${role ? role.name : roleKey}`);
    
    // –ö–û–ú–ü–ê–ö–¢–ù–´–ô –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –¥–ª—è –í–°–ï–• —Ä–æ–ª–µ–π
    const centerActions = document.getElementById('centerActions');
    if (centerActions && role) {
        centerActions.innerHTML = `
            <div style="background: linear-gradient(135deg, ${role.color}, ${role.color}99); color: white; padding: 15px; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.2); margin-bottom: 15px; text-align: center;">
                <div style="display: flex; align-items: center; justify-content: center; gap: 10px; margin-bottom: 8px;">
                    <span style="font-size: 24px;">${role.emoji}</span>
                    <h3 style="margin: 0; font-size: 18px; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">${role.name}</h3>
                </div>
                <p style="margin: 0; font-size: 14px; opacity: 0.9;">${role.action}</p>
            </div>
            
            <div id="selectedTarget" style="min-height: 40px; margin: 10px 0;">
                <div style="background: rgba(255,255,255,0.1); border: 2px dashed #ccc; border-radius: 8px; padding: 15px; text-align: center; color: #666; font-size: 14px;">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ —Å—Ç–æ–ª–∞ –∏–≥—Ä–æ–∫–æ–≤
                </div>
            </div>
            
            <div style="text-align: center; margin: 15px 0;">
                <button id="confirmActionBtn" onclick="confirmNightAction()" disabled style="
                    background: #95a5a6; 
                    color: white; 
                    border: none; 
                    padding: 10px 25px; 
                    border-radius: 20px; 
                    font-size: 14px; 
                    font-weight: bold; 
                    cursor: not-allowed;
                    opacity: 0.6;
                    transition: all 0.3s ease;
                ">
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
                </button>
            </div>
            
            <div id="actionHint" style="display: none; background: rgba(255,255,255,0.95); border: 2px solid ${role.color}; border-radius: 8px; padding: 10px; margin-top: 10px; text-align: center;">
                <div id="hintText" style="font-size: 14px; font-weight: bold; color: ${role.color};"></div>
            </div>
        `;
        console.log(`‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${role.name}`);
    } else {
        console.error('‚ùå centerActions –∏–ª–∏ role –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
            centerActions: !!centerActions,
            role: !!role,
            roleKey: roleKey
        });
    }
}

// –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
let selectedTargetId = null;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
function selectTarget(playerId) {
    if (!gameState.currentNightRole) return;
    
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    // –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û –¢–ó
    const validation = isValidTarget(gameState.currentNightRole, player);
    if (!validation.valid) {
        alert(`‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å ${player.name}: ${validation.reason}`);
        return;
    }
    
    selectedTargetId = playerId;
    const role = nightRoles[gameState.currentNightRole];
    
    const targetDisplay = document.getElementById('selectedTarget');
    const actionHint = document.getElementById('actionHint');
    const hintText = document.getElementById('hintText');
    
    if (targetDisplay && player) {
        targetDisplay.innerHTML = `
            <div style="background: rgba(52, 152, 219, 0.1); border: 2px solid #3498db; border-radius: 8px; padding: 10px; text-align: center;">
                –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å: <strong>${player.name}</strong>
            </div>
        `;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    if (actionHint && hintText && role) {
        hintText.textContent = `${role.hint}: ${player.name}`;
        actionHint.style.display = 'block';
        actionHint.style.borderColor = role.color;
        actionHint.querySelector('div').style.color = role.color;
    }
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    selectPlayer(playerId);
    updatePlayerVisualEffects(playerId, 'targeted', gameState.currentNightRole);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmBtn = document.getElementById('confirmActionBtn');
    if (confirmBtn) {
        confirmBtn.disabled = false;
        confirmBtn.style.background = role ? role.color : '#2ed573';
        confirmBtn.style.opacity = '1';
        confirmBtn.style.cursor = 'pointer';
        console.log('‚úÖ Confirm button activated for target:', player.name);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –ø–æ —Å—Ç–æ–ª—É
function handleNightAction(playerId) {
    selectTarget(playerId);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫ –∏–≥—Ä–æ–∫–∞–º - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function applyNightAction(roleType, targetId) {
    const targetPlayer = gameState.players.find(p => p.id === targetId);
    if (!targetPlayer) return;
    
    console.log(`üåô –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ ${roleType} –∫ –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
    
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ù–û–ß–ù–´–• –î–ï–ô–°–¢–í–ò–ô –ü–û –¢–ó
    console.log(`üåô –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ ${roleType} –∫ –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
    
    switch (roleType) {
        case 'mafia':
            // –ú–∞—Ñ–∏—è –∏ –î–æ–Ω –¥–µ–π—Å—Ç–≤—É—é—Ç –≤–º–µ—Å—Ç–µ - –ø–æ–º–µ—á–∞–µ–º —Ü–µ–ª—å –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞
            nightPlan.mafiaTarget = targetId;
            updatePlayerVisualEffects(targetId, 'targeted', roleType);
            addLogEntry(`üî´ –ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ —Ü–µ–ª—å: ${targetPlayer.name}`);
            break;
            
        case 'consigliere':
            // –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä–±–æ–≤–∞—Ç—å (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
            nightPlan.consigliereTarget = targetId;
            updatePlayerVisualEffects(targetId, 'targeted', roleType);
            addLogEntry(`ü§ù –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –≤–µ—Ä–±–æ–≤–∫–∏: ${targetPlayer.name}`);
            break;
            
        case 'jailer':
            // –¢—é—Ä–µ–º—â–∏–∫ –∞—Ä–µ—Å—Ç–æ–≤—ã–≤–∞–µ—Ç
            nightPlan.jailerTarget = targetId;
            updatePlayerVisualEffects(targetId, 'targeted', roleType);
            addLogEntry(`üîí –¢—é—Ä–µ–º—â–∏–∫ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –∞—Ä–µ—Å—Ç–∞: ${targetPlayer.name}`);
            break;
            
        case 'sheriff':
            // –ö–æ–º–∏—Å—Å–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–∞
            nightPlan.sheriffTarget = targetId;
            updatePlayerVisualEffects(targetId, 'checked', roleType);
            addLogEntry(`üîé –ö–æ–º–∏—Å—Å–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: ${targetPlayer.name}`);
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–µ –Ω–æ—á–∏
            if (!targetPlayer.flags) targetPlayer.flags = {};
            targetPlayer.flags.checkedBySheriff = true;
            break;
            
        case 'doctor':
            // –î–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç –∏–≥—Ä–æ–∫–∞
            nightPlan.doctorTarget = targetId;
            updatePlayerVisualEffects(targetId, 'healed', roleType);
            addLogEntry(`üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –¥–ª—è –ª–µ—á–µ–Ω–∏—è: ${targetPlayer.name}`);
            break;
            
        case 'maniac':
            // –ú–∞–Ω—å—è–∫ —É–±–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞
            nightPlan.maniacTarget = targetId;
            updatePlayerVisualEffects(targetId, 'targeted', roleType);
            addLogEntry(`üî™ –ú–∞–Ω—å—è–∫ –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É: ${targetPlayer.name}`);
            break;
            
        case 'lover':
            // –õ—é–±–æ–≤–Ω–∏—Ü–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏ –∑–∞—â–∏—â–∞–µ—Ç
            nightPlan.loverTarget = targetId;
            updatePlayerVisualEffects(targetId, 'loved', roleType);
            addLogEntry(`üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${targetPlayer.name}`);
            break;
            
        case 'kamikaze':
            // –ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫—É–µ—Ç (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
            nightPlan.kamikazeTarget = targetId;
            gameState.kamikazeUsed = true;
            updatePlayerVisualEffects(targetId, 'targeted', roleType);
            addLogEntry(`üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏: ${targetPlayer.name}`);
            break;
            
        default:
            console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: ${roleType}`);
            addLogEntry(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: ${roleType}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayerTable();
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
function isValidTarget(roleKey, targetPlayer) {
    if (!targetPlayer || targetPlayer.status !== 'alive') {
        return { valid: false, reason: '–¶–µ–ª—å –º–µ—Ä—Ç–≤–∞' };
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¢–ó
    switch (roleKey) {
        case 'mafia':
            // –ú–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç —É–±–∏–≤–∞—Ç—å: –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö, –º–∞—Ñ–∏—é
            if (targetPlayer.jailed) return { valid: false, reason: '–¶–µ–ª—å –≤ —Ç—é—Ä—å–º–µ' };
            if (['mafia', 'don', 'consigliere'].includes(targetPlayer.role)) {
                return { valid: false, reason: '–ú–∞—Ñ–∏—è –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞—Ñ–∏—é' };
            }
            return { valid: true };
            
        case 'consigliere':
            // –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏: —Ç–æ–ª—å–∫–æ –Ω–µ –º–∞—Ñ–∏—è, –Ω–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö
            if (targetPlayer.jailed) return { valid: false, reason: '–¶–µ–ª—å –≤ —Ç—é—Ä—å–º–µ' };
            if (['mafia', 'don', 'consigliere'].includes(targetPlayer.role)) {
                return { valid: false, reason: '–ù–µ–ª—å–∑—è –≤–µ—Ä–±–æ–≤–∞—Ç—å –º–∞—Ñ–∏—é' };
            }
            return { valid: true };
            
        case 'maniac':
        case 'kamikaze':
        case 'lover':
            // –£–±–∏–π—Ü—ã –∏ –õ—é–±–æ–≤–Ω–∏—Ü–∞ –Ω–µ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö
            if (targetPlayer.jailed) return { valid: false, reason: '–¶–µ–ª—å –≤ —Ç—é—Ä—å–º–µ' };
            return { valid: true };
            
        case 'sheriff':
        case 'doctor':
        case 'jailer':
            // –ö–æ–º–∏—Å—Å–∞—Ä, –î–æ–∫—Ç–æ—Ä, –¢—é—Ä–µ–º—â–∏–∫ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –≤—Å–µ—Ö –∂–∏–≤—ã—Ö
            return { valid: true };
            
        default:
            return { valid: true };
    }
}

// –£–ë–ò–†–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function nextNightAction() {
    // –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    console.log('nextNightAction called - waiting for manual confirmation');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function updatePlayerVisualEffects(playerId, effect, roleType = null) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) {
        console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:', playerId);
        return;
    }
    
    const seat = document.querySelector(`[data-seat-number="${player.seatNumber}"]`);
    if (!seat) {
        console.log('‚ùå –ú–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', player.seatNumber);
        return;
    }
    
    console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç ${effect} –∫ –∏–≥—Ä–æ–∫—É ${player.name} (–º–µ—Å—Ç–æ ${player.seatNumber})`);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (targeted), –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è
    if (effect === 'targeted') {
        // –î–ª—è targeted —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ targeted —ç—Ñ—Ñ–µ–∫—Ç—ã
        seat.classList.remove('targeted');
        const existingTargetedIcons = seat.querySelectorAll('.effect-icon.targeted');
        existingTargetedIcons.forEach(icon => icon.remove());
    } else {
        // –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        seat.classList.remove('marked-for-death', 'healed', 'loved', 'recruited', 'checked', 'blocked', 'mined', 'jailed');
        const existingIcons = seat.querySelectorAll('.effect-icon:not(.targeted)');
        existingIcons.forEach(icon => icon.remove());
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –∏–∑ —Ä–æ–ª–∏
    const role = nightRoles[roleType];
    let iconText = '‚ùì';
    if (role && role.targetIcon) {
        iconText = role.targetIcon;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    switch (effect) {
        case 'markedForDeath':
            seat.classList.add('marked-for-death');
            addEffectIcon(seat, iconText, '#ff0000');
            console.log(`üíÄ –ú–µ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'healed':
            seat.classList.add('healed');
            addEffectIcon(seat, '‚ûï', '#2ecc71');
            console.log(`‚öïÔ∏è –õ–µ—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'loved':
            seat.classList.add('loved');
            addEffectIcon(seat, 'üíã', '#e91e63', false, 'br');
            console.log(`üíã –ü–æ—Ü–µ–ª—É–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'recruited':
            seat.classList.add('recruited');
            addEffectIcon(seat, 'ü§ù', '#dc143c');
            console.log(`ü§ù –í–µ—Ä–±–æ–≤–∫–∞ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'checked':
            seat.classList.add('checked');
            addEffectIcon(seat, 'üîç', '#3498db');
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'blocked':
            seat.classList.add('blocked');
            addEffectIcon(seat, 'üíã', '#e91e63');
            console.log(`üíã –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'mined':
            seat.classList.add('mined');
            addEffectIcon(seat, 'üí£', '#ff6b35');
            console.log(`üí£ –ú–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'targeted':
            seat.classList.add('targeted');
            addEffectIcon(seat, iconText, role ? role.color : '#333333', true); // true = –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞
            console.log(`üéØ –¶–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
            
        case 'jailed':
            seat.classList.add('jailed');
            addEffectIcon(seat, 'üîí', '#708090');
            console.log(`üîí –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É ${player.name}`);
            break;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function addEffectIcon(seat, iconText, color, isTemporary = false, position = 'tr') {
    const effectIcon = document.createElement('div');
    effectIcon.className = isTemporary ? 'effect-icon targeted' : 'effect-icon';
    effectIcon.style.cssText = `
        position: absolute;
        ${position === 'br' ? 'bottom: 5px;' : 'top: 5px;'}
        right: 5px;
        font-size: 20px;
        z-index: 100;
        color: ${color};
        text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        pointer-events: none;
        background: rgba(255,255,255,0.95);
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    effectIcon.textContent = iconText;
    seat.appendChild(effectIcon);
    return effectIcon;
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–û–ß–ò –ü–û –¢–ó - –°–¢–†–û–ì–ò–ô –ü–û–†–Ø–î–û–ö –ü–†–ò–û–†–ò–¢–ï–¢–û–í
function resolveNight(state = gameState) {
    console.log('üåô –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–æ—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –¢–ó...');
    
    // 0) –°–Ω–∏–º–æ–∫ "–¥–æ" –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const beforeAliveIds = new Set(state.players.filter(p => p.status === 'alive').map(p => p.id));
    const beforeJailedIds = new Set(state.players.filter(p => p.jailed).map(p => p.id));
    
    nightLogs = []; // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
    
    // 1. –¢–Æ–†–¨–ú–ê - –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π
    if (nightPlan.jailerTarget) {
        const target = gameState.players.find(p => p.id === nightPlan.jailerTarget);
        if (target && ['mafia', 'don', 'consigliere'].includes(target.role)) {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
            gameState.players.forEach(p => { if (p.jailed) p.jailed = false; });
            // –°–∞–∂–∞–µ–º –Ω–æ–≤–æ–≥–æ
            target.jailed = true;
            nightLogs.push(`üîí –¢—é—Ä–µ–º—â–∏–∫ –∞—Ä–µ—Å—Ç–æ–≤–∞–ª: ${target.name} (–º–∞—Ñ–∏—è)`);
            console.log(`üîí ${target.name} –∑–∞–∫–ª—é—á–µ–Ω –≤ —Ç—é—Ä—å–º—É`);
        } else if (target) {
            nightLogs.push(`üîí –¢—é—Ä–µ–º—â–∏–∫: –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞ (${target.name} –Ω–µ –º–∞—Ñ–∏—è)`);
        }
    }
    
    // 2. –õ–Æ–ë–û–í–ù–ò–¶–ê - –±–ª–æ–∫ + –∑–∞—â–∏—Ç–∞
    if (nightPlan.loverTarget) {
        const target = gameState.players.find(p => p.id === nightPlan.loverTarget);
        if (target) {
            if (!target.effects) target.effects = {};
            target.effects.lovedThisNight = true;
            nightLogs.push(`üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞: –Ω–æ—á—å —Å ${target.name} (–±–ª–æ–∫ + –∑–∞—â–∏—Ç–∞)`);
            console.log(`üíã ${target.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞—â–∏—â–µ–Ω –õ—é–±–æ–≤–Ω–∏—Ü–µ–π`);
        }
    }
    
    // 3. –î–û–ö–¢–û–† - –ª–µ—á–µ–Ω–∏–µ
    if (nightPlan.doctorTarget) {
        const target = gameState.players.find(p => p.id === nightPlan.doctorTarget);
        if (target) {
            if (!target.effects) target.effects = {};
            target.effects.doctorHealed = true;
            nightLogs.push(`üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª: ${target.name}`);
            console.log(`üíâ ${target.name} –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –î–æ–∫—Ç–æ—Ä–∞`);
        }
    }
    
    // 4. –ö–û–ù–°–ò–õ–¨–ï–†–ò - –≤–µ—Ä–±–æ–≤–∫–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ñ–∏–∏ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —á–∏—Å–ª–∞)
    if (nightPlan.consigliereTarget && !gameState.consigliereUsed) {
        const allowed = canConsigliereAct(gameState);
        const target = gameState.players.find(p => p.id === nightPlan.consigliereTarget);

        if (!allowed) {
            nightLogs.push('ü§ù –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏: —Ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–∞—Ñ–∏—è –Ω–µ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å / —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)');
        } else if (target && target.role === 'civilian' && target.status === 'alive') {
            target.role = 'mafia';
            nightLogs.push(`ü§ù –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏: –∑–∞–≤–µ—Ä–±–æ–≤–∞–ª ${target.name}`);
        } else if (target) {
            nightLogs.push(`ü§ù –ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏: –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è (${target.name} –Ω–µ –º–∏—Ä–Ω—ã–π)`);
        }

        gameState.consigliereUsed = true;
    }
    
    // 5. –ö–ê–ú–ò–ö–ê–î–ó–ï - —Ä–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
    if (nightPlan.kamikazeTarget && !gameState.kamikazeUsed) {
        const target = gameState.players.find(p => p.id === nightPlan.kamikazeTarget);
        const kamikaze = gameState.players.find(p => p.role === 'kamikaze' && p.status === 'alive');
        
        if (target && kamikaze) {
            if (['mafia', 'don', 'consigliere'].includes(target.role)) {
                // –¶–µ–ª—å - –º–∞—Ñ–∏—è
                if (target.effects?.lovedThisNight) {
                    // –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ –õ—é–±–æ–≤–Ω–∏—Ü–µ–π
                    kamikaze.status = 'dead';
                    nightLogs.push(`üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫–æ–≤–∞–ª ${target.name} ‚Üí —Ü–µ–ª—å –≤—ã–∂–∏–ª–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –õ—é–±–æ–≤–Ω–∏—Ü—ã, –∫–∞–º–∏–∫–∞–¥–∑–µ –ø–æ–≥–∏–±`);
                } else {
                    // –û–±–∞ –ø–æ–≥–∏–±–∞—é—Ç
                    target.status = 'dead';
                    kamikaze.status = 'dead';
                    nightLogs.push(`üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫–æ–≤–∞–ª ${target.name} ‚Üí –æ–±–∞ –ø–æ–≥–∏–±–ª–∏`);
                }
            } else {
                // –¶–µ–ª—å –Ω–µ –º–∞—Ñ–∏—è - –Ω–∏–∫—Ç–æ –Ω–µ —É–º–∏—Ä–∞–µ—Ç
                nightLogs.push(`üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫–æ–≤–∞–ª ${target.name} ‚Üí –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–± (—Ü–µ–ª—å –Ω–µ –º–∞—Ñ–∏—è)`);
            }
        }
        gameState.kamikazeUsed = true;
    }
    
    // 6. –£–ë–ò–ô–°–¢–í–û –ú–ê–§–ò–ò
    if (nightPlan.mafiaTarget) {
        const target = gameState.players.find(p => p.id === nightPlan.mafiaTarget);
        if (target && target.status === 'alive') {
            if (target.effects?.lovedThisNight) {
                nightLogs.push(`üî´ –ú–∞—Ñ–∏—è: –æ—Ç–º–µ–Ω–µ–Ω–æ (${target.name} –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –õ—é–±–æ–≤–Ω–∏—Ü—ã)`);
            } else if (target.effects?.doctorHealed) {
                nightLogs.push(`üî´ –ú–∞—Ñ–∏—è: –æ—Ç–º–µ–Ω–µ–Ω–æ (${target.name} –≤—ã–ª–µ—á–µ–Ω –î–æ–∫—Ç–æ—Ä–æ–º)`);
            } else {
                target.status = 'dead';
                nightLogs.push(`üî´ –ú–∞—Ñ–∏—è —É–±–∏–ª–∞: ${target.name}`);
                console.log(`üî´ ${target.name} —É–±–∏—Ç –º–∞—Ñ–∏–µ–π`);
            }
        }
    }
    
    // 7. –£–ë–ò–ô–°–¢–í–û –ú–ê–ù–¨–Ø–ö–ê
    if (nightPlan.maniacTarget) {
        const target = gameState.players.find(p => p.id === nightPlan.maniacTarget);
        if (target && target.status === 'alive') {
            if (target.effects?.lovedThisNight) {
                nightLogs.push(`üî™ –ú–∞–Ω—å—è–∫: –æ—Ç–º–µ–Ω–µ–Ω–æ (${target.name} –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –õ—é–±–æ–≤–Ω–∏—Ü—ã)`);
            } else if (target.effects?.doctorHealed) {
                nightLogs.push(`üî™ –ú–∞–Ω—å—è–∫: –æ—Ç–º–µ–Ω–µ–Ω–æ (${target.name} –≤—ã–ª–µ—á–µ–Ω –î–æ–∫—Ç–æ—Ä–æ–º)`);
            } else {
                target.status = 'dead';
                nightLogs.push(`üî™ –ú–∞–Ω—å—è–∫ —É–±–∏–ª: ${target.name}`);
                console.log(`üî™ ${target.name} —É–±–∏—Ç –º–∞–Ω—å—è–∫–æ–º`);
            }
        }
    }
    
    // 8. –í–ó–†–´–í –ü–û–î–†–´–í–ù–ò–ö–ê (–µ—Å–ª–∏ –ø–æ–¥—Ä—ã–≤–Ω–∏–∫ —É–º–µ—Ä)
    const bomber = gameState.players.find(p => p.role === 'bomber');
    if (bomber && bomber.status === 'dead' && bomberMinedIds.size > 0) {
        const victims = [];
        bomberMinedIds.forEach(minedId => {
            const victim = gameState.players.find(p => p.id === minedId);
            if (victim && victim.status === 'alive') {
                victim.status = 'dead';
                victims.push(victim.name);
            }
        });
        if (victims.length > 0) {
            nightLogs.push(`üí£ –ü–æ–¥—Ä—ã–≤–Ω–∏–∫ –ø–∞–ª ‚Üí –≤–∑—Ä—ã–≤ —É–Ω—ë—Å: ${victims.join(', ')}`);
        }
    }
    
    // 9. –ü–†–ï–í–†–ê–©–ï–ù–ò–ï –û–ë–û–†–û–¢–ù–Ø
    const aliveMafia = gameState.players.filter(p => 
        ['mafia', 'don', 'consigliere'].includes(p.role) && p.status === 'alive'
    );
    const werewolf = gameState.players.find(p => p.role === 'werewolf' && p.status === 'alive');
    if (aliveMafia.length === 0 && werewolf) {
        werewolf.role = 'mafia';
        nightLogs.push(`üê∫ –û–±–æ—Ä–æ—Ç–µ–Ω—å –≤—Å—Ç—É–ø–∏–ª –≤ –º–∞—Ñ–∏—é`);
        console.log(`üê∫ –û–±–æ—Ä–æ—Ç–µ–Ω—å –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –º–∞—Ñ–∏—é`);
    }
    
    // 10. –°–ë–†–û–° –ù–û–ß–ù–´–• –ú–ï–¢–û–ö
    clearNightEffects();
    
    // 1) –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è "–ø–æ—Å–ª–µ" –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const afterAliveIds = new Set(state.players.filter(p => p.status === 'alive').map(p => p.id));
    const afterJailedIds = new Set(state.players.filter(p => p.jailed).map(p => p.id));

    // –ö—Ç–æ —É–º–µ—Ä —ç—Ç–æ–π –Ω–æ—á—å—é (–±—ã–ª –∂–∏–≤, —Å—Ç–∞–ª –º—ë—Ä—Ç–≤)
    const diedTonight = state.players
        .filter(p => beforeAliveIds.has(p.id) && !afterAliveIds.has(p.id))
        .map(p => p.name || p.nickname || p.username);

    // –ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ —Ç—é—Ä—å–º—É —ç—Ç–æ–π –Ω–æ—á—å—é (–Ω–µ –±—ã–ª jailed, —Å—Ç–∞–ª jailed)
    const jailedTonight = state.players
        .filter(p => !beforeJailedIds.has(p.id) && afterJailedIds.has(p.id))
        .map(p => p.name || p.nickname || p.username);

    // 2) –î–≤–µ —Å—Ç—Ä–æ–∫–∏-—à–∞–ø–∫–∏ —Å–≤–æ–¥–∫–∏
    const header = [];
    if (diedTonight.length) header.push(`üïØÔ∏è –≠—Ç—É –Ω–æ—á—å –Ω–µ –ø–µ—Ä–µ–∂–∏–ª–∏: ${diedTonight.join(', ')}`);
    if (jailedTonight.length) header.push(`üöî –í —Ç—é—Ä—å–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ${jailedTonight.join(', ')}`);

    // 3) –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥: —Å–Ω–∞—á–∞–ª–∞ —à–∞–ø–∫–∞, –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
    const summary = [...header, ...nightLogs];

    console.log('üåô –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–æ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–≤–æ–¥–∫–∞:', summary);
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–æ—á–∏
    return summary;
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function clearNightEffects() {
    gameState.players.forEach(player => {
        if (player.effects) {
            delete player.effects.lovedThisNight;
            delete player.effects.doctorHealed;
        }
    });
    
    // –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω –Ω–æ—á–∏
    nightPlan = {
        mafiaTarget: null,
        consigliereTarget: null,
        sheriffTarget: null,
        doctorTarget: null,
        maniacTarget: null,
        loverTarget: null,
        kamikazeTarget: null,
        jailerTarget: null
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ –Ω–æ—á–∏
function applyEndOfNightEffects() {
    console.log('üåô –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–º–µ—Ä—Ç–∏...');
    
    gameState.players.forEach(player => {
        if (player.effects && player.effects.markedForDeath && player.status === 'alive') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—â–∏—â–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
            if (!player.effects.protected) {
                updatePlayerStatus(player.id, 'dead', `–£–±–∏—Ç –º–∞—Ñ–∏–µ–π`);
                addLogEntry(`üíÄ –ú–∞—Ñ–∏—è —É–±–∏–≤–∞–µ—Ç: ${player.name}`);
                console.log(`üíÄ –ò–≥—Ä–æ–∫ ${player.name} —É–±–∏—Ç –º–∞—Ñ–∏–µ–π`);
            } else {
                addLogEntry(`‚öïÔ∏è ${player.name} –±—ã–ª —Å–ø–∞—Å–µ–Ω –æ—Ç —Å–º–µ—Ä—Ç–∏!`);
                console.log(`‚öïÔ∏è –ò–≥—Ä–æ–∫ ${player.name} —Å–ø–∞—Å–µ–Ω`);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –Ω–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (player.effects) {
            delete player.effects.markedForDeath;
            delete player.effects.doctorHealed;
            delete player.effects.protected;
            delete player.effects.blocked;
        }
    });
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–æ—á–∏
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => {
        seat.classList.remove('marked-for-death', 'healed', 'loved', 'recruited', 'checked', 'blocked', 'mined', 'jailed', 'targeted');
        const effectIcons = seat.querySelectorAll('.effect-icon');
        effectIcons.forEach(icon => icon.remove());
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayerTable();
}

function finishNight() {
    console.log('üåô Forcing night phase completion...');
    
    // –ù–û–í–û–ï –†–ê–ó–†–ï–®–ï–ù–ò–ï –ù–û–ß–ò –ü–û –¢–ó
    const nightSummary = resolveNight();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –Ω–æ—á–∏
    showNightSummary(nightSummary);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ—á—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const nightPanel = document.getElementById('nightPanel');
    if (nightPanel) nightPanel.style.display = 'none';
    closeNightHistory(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–æ—á–∏
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selectedTargetId = null;
    gameState.currentNightRole = null;
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–≤
    const allSeats = document.querySelectorAll('.player-seat');
    allSeats.forEach(seat => seat.classList.remove('selected'));
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    clearNightVisualEffects();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–Ω—é
    gameState.dayNumber++;
    startDayPhase();
    addHistoryEntry(`üåÖ –ù–æ—á—å ${gameState.dayNumber - 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    
    // Check win conditions
    checkWinConditions();
    updateGameInstructions();
    
    console.log('‚úÖ Night phase forcefully completed');
}

// –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –Ω–æ—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
function showNightSummary(logs) {
    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É
    const parsed = parseNightSummary(logs || []);
    showNightSummaryModal(parsed);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
    (logs || []).forEach(log => addLogEntry(log));
}

function parseNightSummary(logs) {
    const byMafia = [];
    const byManiac = [];
    const byBomb = [];
    const byKamikaze = [];
    const savedByDoctor = [];
    const savedByLover = [];
    const jailed = [];
    
    logs.forEach(line => {
        if (line.includes('üî´ –ú–∞—Ñ–∏—è —É–±–∏–ª–∞:')) byMafia.push(line.split(':').slice(1).join(':').trim());
        if (line.includes('üî™ –ú–∞–Ω—å—è–∫ —É–±–∏–ª:')) byManiac.push(line.split(':').slice(1).join(':').trim());
        if (line.includes('üí£ –ü–æ–¥—Ä—ã–≤–Ω–∏–∫ –ø–∞–ª')) {
            const names = line.split('—É–Ω—ë—Å:')[1]?.trim();
            if (names) byBomb.push(names);
        }
        if (line.includes('üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫–æ–≤–∞–ª') && line.includes('–æ–±–∞ –ø–æ–≥–∏–±–ª–∏')) {
            const name = line.split('–ö–∞–º–∏–∫–∞–¥–∑–µ –∞—Ç–∞–∫–æ–≤–∞–ª')[1]?.split('‚Üí')[0]?.trim();
            if (name) byKamikaze.push(name);
        }
        if (line.includes('üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª:')) savedByDoctor.push(line.split(':').slice(1).join(':').trim());
        if (line.includes('–ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –õ—é–±–æ–≤–Ω–∏—Ü—ã') || line.includes('–õ—é–±–æ–≤–Ω–∏—Ü–∞: –Ω–æ—á—å —Å')) {
            const name = line.includes('–õ—é–±–æ–≤–Ω–∏—Ü–∞: –Ω–æ—á—å —Å') ? line.split('–Ω–æ—á—å —Å')[1]?.trim() : line.split('(')[1]?.split(')')[0];
            if (name) savedByLover.push(name);
        }
        if (line.includes('üîí –¢—é—Ä–µ–º—â–∏–∫ –∞—Ä–µ—Å—Ç–æ–≤–∞–ª:')) jailed.push(line.split(':').slice(1).join(':').trim());
    });
    
    return { byMafia, byManiac, byBomb, byKamikaze, savedByDoctor, savedByLover, jailed };
}

function showNightSummaryModal(summary) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    const prev = document.getElementById('nightSummaryOverlay');
    if (prev && prev.parentNode) prev.parentNode.removeChild(prev);
    
    const overlay = document.createElement('div');
    overlay.id = 'nightSummaryOverlay';
    overlay.className = 'night-summary-overlay';
    
    const content = document.createElement('div');
    content.className = 'night-summary-content';
    
    let deathsSection = '';
    const anyDeaths = summary.byMafia.length || summary.byManiac.length || summary.byBomb.length || summary.byKamikaze.length;
    if (!anyDeaths) {
        deathsSection = `<div class="summary-line">üåô –í —ç—Ç—É –Ω–æ—á—å –Ω–∏–∫—Ç–æ –Ω–µ —É–º–µ—Ä</div>`;
    } else {
        if (summary.byMafia.length) {
            deathsSection += `<div class="summary-line">üî´ –£–±–∏—Ç—ã –º–∞—Ñ–∏–µ–π: <strong>${summary.byMafia.join(', ')}</strong></div>`;
        }
        if (summary.byManiac.length) {
            deathsSection += `<div class="summary-line">üî™ –£–±–∏—Ç—ã –º–∞–Ω—å—è–∫–æ–º: <strong>${summary.byManiac.join(', ')}</strong></div>`;
        }
        if (summary.byBomb.length) {
            deathsSection += `<div class="summary-line">üí£ –í–∑—Ä—ã–≤ —É–Ω—ë—Å: <strong>${summary.byBomb.join(', ')}</strong></div>`;
        }
        if (summary.byKamikaze.length) {
            deathsSection += `<div class="summary-line">üí• –ö–∞–º–∏–∫–∞–¥–∑–µ –∑–∞–±—Ä–∞–ª: <strong>${summary.byKamikaze.join(', ')}</strong></div>`;
        }
    }
    
    let footerSection = '';
    const footLines = [];
    if (summary.savedByLover.length) footLines.push(`üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞ —Å–ø–∞—Å–ª–∞: <strong>${[...new Set(summary.savedByLover)].join(', ')}</strong>`);
    if (summary.savedByDoctor.length) footLines.push(`üíâ –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª: <strong>${[...new Set(summary.savedByDoctor)].join(', ')}</strong>`);
    if (summary.jailed.length) footLines.push(`üîí –¢—é—Ä–µ–º—â–∏–∫ –∞—Ä–µ—Å—Ç–æ–≤–∞–ª: <strong>${[...new Set(summary.jailed)].join(', ')}</strong>`);
    if (footLines.length) {
        footerSection = `<div class="summary-divider"></div><div class="summary-footer">${footLines.map(l => `<div class="summary-line">${l}</div>`).join('')}</div>`;
    }
    
    content.innerHTML = `
        <h3 class="night-summary-title">üåô –ò—Ç–æ–≥–∏ –Ω–æ—á–∏</h3>
        <div class="night-summary-body">
            ${deathsSection}
        </div>
        ${footerSection}
        <div class="night-summary-actions">
            <button class="modal-btn confirm" id="closeNightSummaryBtn">OK</button>
        </div>
    `;
    
    overlay.appendChild(content);
    document.body.appendChild(overlay);
    
    const closeBtn = document.getElementById('closeNightSummaryBtn');
    if (closeBtn) closeBtn.onclick = () => {
        if (overlay && overlay.parentNode) overlay.parentNode.removeChild(overlay);
    };
}

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å–ø—Ä–∞–≤–∞
function ensureToastContainer() {
    let container = document.getElementById('toastContainer');
    if (!container) {
        container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container';
        document.body.appendChild(container);
    }
    return container;
}

function showToast(kind, emoji, text) {
    const container = ensureToastContainer();
    const toast = document.createElement('div');
    toast.className = `toast ${kind || 'info'}`;
    toast.innerHTML = `<span class="emoji">${emoji || '‚ÑπÔ∏è'}</span><span>${text}</span>`;
    container.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('hide');
        setTimeout(() => {
            if (toast && toast.parentNode) toast.parentNode.removeChild(toast);
        }, 250);
    }, 3000);
}

// Night History Management
function toggleNightHistory() {
    const historyPanel = document.getElementById('nightHistoryPanel');
    
    if (historyPanel.style.display === 'none' || !historyPanel.style.display) {
        showNightHistory();
    } else {
        closeNightHistory();
    }
}

function showNightHistory() {
    const historyPanel = document.getElementById('nightHistoryPanel');
    const historyContent = document.getElementById('nightHistoryContent');
    
    if (historyPanel && historyContent) {
        historyPanel.style.display = 'block';
        updateNightHistoryContent();
        console.log('üìú Night history panel opened');
    }
}

function closeNightHistory() {
    const historyPanel = document.getElementById('nightHistoryPanel');
    if (historyPanel) {
        historyPanel.style.display = 'none';
        console.log('üìú Night history panel closed');
    }
}

function updateNightHistoryContent() {
    const historyContent = document.getElementById('nightHistoryContent');
    if (!historyContent) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    const relevantHistory = gameState.log.filter(entry => {
        const text = entry.action.toLowerCase();
        return text.includes('üåô') || text.includes('‚òÄÔ∏è') || text.includes('üíÄ') || 
               text.includes('üó≥Ô∏è') || text.includes('üé≠') || text.includes('üåÖ') ||
               text.includes('—É–±–∏—Ç') || text.includes('–≥–æ–ª–æ—Å—É–µ—Ç') || text.includes('–ø—Ä–æ–≤–µ—Ä–∏–ª') ||
               text.includes('–ª–µ—á–∏—Ç') || text.includes('–±–ª–æ–∫–∏—Ä—É–µ—Ç') || text.includes('–º–∏–Ω–∏—Ä—É–µ—Ç');
    });
    
    if (relevantHistory.length === 0) {
        historyContent.innerHTML = `
            <div style="text-align: center; color: rgba(255,255,255,0.6); padding: 20px;">
                –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞<br>
                <small>–î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</small>
            </div>
        `;
        return;
    }
    
    let html = '';
    relevantHistory.slice(-20).reverse().forEach((entry, index) => {
        const entryClass = getHistoryEntryClass(entry.action);
        
        html += `
            <div class="history-entry ${entryClass}">
                <div class="history-entry-time">${entry.timestamp}</div>
                <div class="history-entry-text">${entry.action}${entry.details ? ': ' + entry.details : ''}</div>
            </div>
        `;
    });
    
    historyContent.innerHTML = html;
}

function getHistoryEntryClass(entry) {
    const text = entry.toLowerCase();
    
    if (text.includes('üåô') || text.includes('–Ω–æ—á—å')) {
        return 'night-action';
    } else if (text.includes('‚òÄÔ∏è') || text.includes('–¥–µ–Ω—å')) {
        return 'day-action';
    } else if (text.includes('üó≥Ô∏è') || text.includes('–≥–æ–ª–æ—Å—É–µ—Ç')) {
        return 'voting-action';
    } else {
        return 'game-event';
    }
}

// –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VISUAL VOTING SYSTEM –≤—ã—à–µ



// Win Conditions
function checkWinConditions() {
    const alivePlayers = gameState.players.filter(p => p.status === 'alive');
    const aliveMafia = alivePlayers.filter(p => p.role && ['mafia', 'don', 'consigliere'].includes(p.role));
    const aliveCivilians = alivePlayers.filter(p => p.role && ['civilian', 'commissar', 'doctor', 'lover', 'bomber'].includes(p.role));
    
    if (aliveMafia.length === 0) {
        gameState.phase = 'finished';
        gameState.isActive = false;
        addHistoryEntry('üéâ –ú–ò–†–ù–´–ï –ñ–ò–¢–ï–õ–ò –ü–û–ë–ï–î–ò–õ–ò!');
        updateUI();
        updateGameInstructions();
    } else if (aliveMafia.length >= aliveCivilians.length) {
        gameState.phase = 'finished';
        gameState.isActive = false;
        addHistoryEntry('üòà –ú–ê–§–ò–Ø –ü–û–ë–ï–î–ò–õ–ê!');
        updateUI();
        updateGameInstructions();
    }
}

function updateHistoryDisplay() {
    const historyContent = document.getElementById('historyContent');
    if (!historyContent) return;
    
    if (gameState.log.length === 0) {
        historyContent.innerHTML = '<p class="no-history">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ–π—Å—Ç–≤–∏—è.</p>';
        return;
    }
    
    historyContent.innerHTML = gameState.log.slice().reverse().map(entry => `
        <div class="history-entry">
            <div class="history-time">${entry.timestamp} - ${entry.phase}</div>
            <div>${entry.action}${entry.details ? ': ' + entry.details : ''}</div>
        </div>
    `).join('');
}

// Telegram WebApp Integration
tg.onEvent('mainButtonClicked', function() {
    updateUI();
});

tg.onEvent('backButtonClicked', function() {
    if (gameState.phase === 'night') {
        const nightPanel = document.getElementById('nightPanel');
        if (nightPanel) nightPanel.style.display = 'none';
        startDayPhase();
    } else if (gameState.phase === 'voting') {
        const votingPanel = document.getElementById('votingPanel');
        if (votingPanel) votingPanel.style.display = 'none';
        startDayPhase();
    } else {
        showMainMenu();
    }
});

// Setup Telegram WebApp buttons
tg.MainButton.setText('–û–±–Ω–æ–≤–∏—Ç—å');
tg.MainButton.onClick(function() {
    updateUI();
});
tg.MainButton.show();

// –î–æ–±–∞–≤–∏—Ç—å 16 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function addTestPlayers() {
    if (gameState.players.length > 0) {
        if (!confirm('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤? –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.')) {
            return;
        }
    }
    
    const testPlayers = [
        '–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π', '–ï–ª–µ–Ω–∞',
        '–ú–∏—Ö–∞–∏–ª', '–û–ª—å–≥–∞', '–ê–Ω–¥—Ä–µ–π', '–ù–∞—Ç–∞–ª—å—è', '–í–ª–∞–¥–∏–º–∏—Ä', '–¢–∞—Ç—å—è–Ω–∞',
        '–ù–∏–∫–æ–ª–∞–π', '–ò—Ä–∏–Ω–∞', '–ü–∞–≤–µ–ª', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞'
    ];
    
    let startSeat = 1;
    // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
    while (gameState.players.some(p => p.seatNumber === startSeat) && startSeat <= 20) {
        startSeat++;
    }
    
    let addedCount = 0;
    for (let i = 0; i < testPlayers.length && addedCount < 16; i++) {
        const seatNumber = startSeat + i;
        
        if (seatNumber > 20) break; // –ù–µ –±–æ–ª—å—à–µ 20 –º–µ—Å—Ç
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –º–µ—Å—Ç–æ
        if (gameState.players.some(p => p.seatNumber === seatNumber)) {
            continue;
        }
        
        const newPlayer = {
            id: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            name: testPlayers[i],
            username: `test_${testPlayers[i].toLowerCase()}`,
            seatNumber: seatNumber,
            role: null,
            status: 'alive'
        };
        
        gameState.players.push(newPlayer);
        addedCount++;
    }
    
    updatePlayersList();
    updatePlayerTable();
    updateGameStatus();
    saveGameData();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    addHistoryEntry(`üéÆ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
    
    alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤! –¢–µ–ø–µ—Ä—å –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏–º —Ä–æ–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".`);
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
function clearAllPlayers() {
    if (gameState.players.length === 0) {
        alert('–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –ø—É—Å—Ç!');
        return;
    }
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö ${gameState.players.length} –∏–≥—Ä–æ–∫–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
        const removedCount = gameState.players.length;
        gameState.players = [];
        gameState.phase = 'setup';
        gameState.isActive = false;
        gameState.dayNumber = 1;
        
        updatePlayersList();
        updatePlayerTable();
        updateGameStatus();
        saveGameData();
        scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–≥—Ä–æ–∫–æ–≤
        addHistoryEntry(`üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∏–≥—Ä–æ–∫–∏ (${removedCount})`);
        
        alert('–í—Å–µ –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã!');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã (–∑–∞–≥–ª—É—à–∫–∞)
function saveGameData() {
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem('mafiaGameState', JSON.stringify(gameState));
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    scheduleSave();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
function loadGameData() {
    try {
        const saved = localStorage.getItem('mafiaGameState');
        if (saved) {
            const savedState = JSON.parse(saved);
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (savedState.players) gameState.players = savedState.players;
            if (savedState.log) gameState.log = savedState.log;
            if (savedState.phase) gameState.phase = savedState.phase;
            if (savedState.dayNumber) gameState.dayNumber = savedState.dayNumber;
            if (savedState.isActive) gameState.isActive = savedState.isActive;
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è/–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
function togglePlayerStatus(playerId) {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    const newStatus = player.status === 'alive' ? 'dead' : 'alive';
    player.status = newStatus;
    
    const action = newStatus === 'dead' ? '–∏—Å–∫–ª—é—á–µ–Ω' : '–≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–≥—Ä—É';
    addHistoryEntry(`‚ö° ${player.name} ${action} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayerTable();
    updatePlayersList();
    saveGameData();
    scheduleSave(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (gameState.isActive) {
        checkWinConditions();
    }
}

// ========== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø ==========

let saveTimer = null;
let lastSaveStatus = null;

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –¥–µ–±–∞—É–Ω—Å–æ–º
function scheduleSave() {
    clearTimeout(saveTimer);
    saveTimer = setTimeout(persist, 700);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function persist() {
    if (!gameState?.id) {
        console.log('‚ö†Ô∏è –ù–µ—Ç ID –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    try {
        const response = await fetch(`/api/games/${gameState.id}/save`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${ADMIN_TOKEN || 'admin-secret'}`
            },
            body: JSON.stringify(gameState)
        });
        
        if (response.ok) {
            const data = await response.json();
            gameState.meta.updatedAt = data.updatedAt || new Date().toISOString();
            localStorage.setItem('lastGameId', gameState.id);
            lastSaveStatus = { success: true, time: new Date().toLocaleTimeString() };
            updateSaveStatus('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ' + lastSaveStatus.time);
            console.log('üíæ –ò–≥—Ä–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', lastSaveStatus.time);
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        lastSaveStatus = { success: false, error: error.message };
        updateSaveStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        try {
            localStorage.setItem(`draft:${gameState.id}`, JSON.stringify(gameState));
            console.log('üíø –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        } catch (localError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', localError);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ UI
function updateSaveStatus(message) {
    let statusElement = document.getElementById('saveStatus');
    if (!statusElement) {
        statusElement = document.createElement('div');
        statusElement.id = 'saveStatus';
        statusElement.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 1000;
            background: rgba(0,0,0,0.7); color: white; padding: 5px 10px;
            border-radius: 4px; font-size: 12px; opacity: 0.8;
        `;
        document.body.appendChild(statusElement);
    }
    statusElement.textContent = message;
    
    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (statusElement.textContent === message) {
            statusElement.style.opacity = '0';
        }
    }, 3000);
    statusElement.style.opacity = '0.8';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
async function checkActiveGame() {
    try {
        const response = await fetch('/api/games/active', {
            headers: { 'Authorization': `Bearer ${ADMIN_TOKEN || 'admin-secret'}` }
        });
        const activeGame = await response.json();
        
        let continueBtn = document.getElementById('btn-continue');
        if (!continueBtn) {
            continueBtn = document.createElement('button');
            continueBtn.id = 'btn-continue';
            continueBtn.className = 'btn primary';
            continueBtn.innerHTML = '‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É';
            continueBtn.style.cssText = 'margin: 10px; display: none;';
            
            const mainMenu = document.querySelector('.main-menu, .game-setup, body');
            if (mainMenu) mainMenu.appendChild(continueBtn);
        }
        
        if (activeGame && activeGame.phase !== 'finished') {
            continueBtn.style.display = 'block';
            continueBtn.onclick = () => resumeGame(activeGame);
            console.log('üéÆ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        } else {
            continueBtn.style.display = 'none';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã:', error);
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function resumeGame(state) {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É:', state.phase);
    gameState = state;
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–∑–µ –∏–≥—Ä—ã
    switch (gameState.phase) {
        case 'setup':
            showSetupScreen();
            break;
        case 'firstNight':
        case 'night':
            renderTableFromState();
            showNightBoard();
            break;
        case 'day':
            renderTableFromState();
            showDayBoard();
            restoreVotingUI();
            break;
        case 'voting':
            renderTableFromState();
            restoreVotingUI();
            break;
        default:
            renderTableFromState();
            updateUI();
    }
    
    updateSaveStatus('–ò–≥—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
function renderTableFromState() {
    if (!gameState.players || gameState.players.length === 0) return;
    
    updatePlayerTable();
    updatePlayersList();
    updateUI();
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function restoreVotingUI() {
    if (gameState.voting && gameState.voting.isActive) {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        showVotingInterface();
        updateVotingDisplay();
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
        if (gameState.voting.timer && gameState.voting.timer.running) {
            const remaining = gameState.voting.timer.remainingMs;
            if (remaining > 0) {
                startVotingTimer(Math.floor(remaining / 1000));
            }
        }
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function finishGame(reason) {
    gameState.phase = 'finished';
    addLogEntry(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${reason}`);
    
    persist().then(() => {
        localStorage.removeItem('lastGameId');
        localStorage.removeItem(`draft:${gameState.id}`);
        updateSaveStatus('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        setTimeout(() => {
            showMainMenu();
            checkActiveGame();
        }, 2000);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å ID
function createNewGame() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–≥—Ä—ã
    gameState.id = 'game_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    gameState.meta.createdAt = new Date().toISOString();
    gameState.meta.updatedAt = new Date().toISOString();
    
    console.log('üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞:', gameState.id);
    scheduleSave(); // –ü–µ—Ä–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤
    let voteCounter = document.getElementById('voteCounter');
    let voteCountContent = document.getElementById('voteCountContent');
    
    if (!voteCounter) {
        console.log('Creating missing voteCounter element');
        voteCounter = document.createElement('div');
        voteCounter.id = 'voteCounter';
        voteCounter.style.display = 'none';
        document.body.appendChild(voteCounter);
    }
    
    if (!voteCountContent) {
        console.log('Creating missing voteCountContent element');
        voteCountContent = document.createElement('div');
        voteCountContent.id = 'voteCountContent';
        if (voteCounter) voteCounter.appendChild(voteCountContent);
    }
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å–ø—Ä–∞–≤–∞
    ensureToastContainer();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
    checkActiveGame();
    
    loadGameData();
    updateUI();
    
    console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è Telegram main button
function onMainButtonClick() {
    refreshUpcomingEvent();
}
