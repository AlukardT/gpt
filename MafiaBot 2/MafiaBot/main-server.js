const express = require('express');
const path = require('path');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { app: apiApp, setupWebSocket } = require('./server/api.js');
require('dotenv').config();

const PORT = process.env.PORT || 5000;
const BASE_URL = `http://127.0.0.1:${PORT}`;

// –°–æ–∑–¥–∞–µ–º wizard —Å—Ü–µ–Ω—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationWizard = new Scenes.WizardScene(
    'registration',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
    async (ctx) => {
        ctx.reply('üìù –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\nüè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—å1—å—å1]-/-/3{4, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –ú–∞—Ñ–∏—é:');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–º–µ–Ω–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º)');
            return;
        }
        
        const nickname = ctx.message.text.trim().slice(0, 30);
        if (nickname.length < 2) {
            ctx.reply('‚ùå –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        
        ctx.wizard.state.nickname = nickname;
        ctx.reply(`‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º: "${nickname}"\n\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:`);
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–≤–∞—à–µ –∏–º—è)');
            return;
        }
        
        const realName = ctx.message.text.trim().slice(0, 50);
        if (realName.length < 2) {
            ctx.reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        
        ctx.wizard.state.realName = realName;
        ctx.reply(`‚úÖ –ò–º—è: "${realName}"\n\nüì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:`);
        return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async (ctx) => {
        const photos = ctx.message?.photo;
        if (!photos || !photos.length) {
            ctx.reply('‚ùå –ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ —Ñ–∞–π–ª, –∞ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ):');
            return;
        }
        
        try {
            // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const photo = photos[photos.length - 1];
            const fileId = photo.file_id;
            console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å ID: ${fileId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            const fileLink = await ctx.telegram.getFileLink(fileId);
            console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: ${fileLink.href}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const userId = ctx.from.id;
            const username = ctx.from.username;
            const firstName = ctx.from.first_name || '';
            const lastName = ctx.from.last_name || '';
            
            const response = await fetch(`${BASE_URL}/api/players/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer bot-secret'
                },
                body: JSON.stringify({
                    telegramId: userId,
                    username: username,
                    firstName: firstName,
                    lastName: lastName,
                    nickname: ctx.wizard.state.nickname,
                    realName: ctx.wizard.state.realName,
                    avatarUrl: fileLink.href // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                })
            });
            
            if (response.ok) {
                const keyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'show_profile')],
                    [Markup.button.callback('üé≠ –°–æ–±—ã—Ç–∏—è', 'show_events')],
                    [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
                ]);
                
                ctx.reply(
                    `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                    `üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º: ${ctx.wizard.state.nickname}\n` +
                    `üë§ –ò–º—è: ${ctx.wizard.state.realName}\n` +
                    `üì∏ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω\n\n` +
                    `‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö –ú–∞—Ñ–∏—è!`,
                    keyboard
                );
                
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${userId}) –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`);
            } else {
                ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        
        return ctx.scene.leave();
    }
);

// –°–æ–∑–¥–∞–µ–º stage –¥–ª—è —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationWizard]);

// Initialize bot with token from environment variables and middleware
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
bot.use(stage.middleware());

// Initialize Express app for web server  
const app = express();
// PORT —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîÑ Starting main server with API integration...');
console.log('üîë Bot token exists:', !!process.env.BOT_TOKEN);
console.log('üë§ Admin ID exists:', !!process.env.ADMIN_TELEGRAM_ID);
console.log('üëë Admin ID value:', process.env.ADMIN_TELEGRAM_ID);

// –î–æ–±–∞–≤–ª—è–µ–º express.json middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());

// API endpoints –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/players/register', async (req, res) => {
    try {
        const p = req.body;
        console.log('üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', p);
        
        if (!p.telegramId || !p.nickname || !p.realName) {
            return res.status(400).json({ ok: false, error: 'telegramId, nickname, and realName required' });
        }

        // –ü—Ä—è–º–æ–µ SQL-–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        const { db } = require('./server/db.js');
        const { userProfiles } = require('./shared/schema.js');
        
        const playerData = {
            id: String(p.telegramId),
            username: p.username || null,
            firstName: p.firstName || null,
            lastName: p.lastName || null,
            nickname: p.nickname,
            realName: p.realName,
            avatarUrl: p.avatarUrl || null,
            isRegistered: true,
            lastActive: new Date()
        };

        await db.insert(userProfiles)
            .values(playerData)
            .onConflictDoUpdate({
                target: userProfiles.id,
                set: {
                    username: playerData.username,
                    firstName: playerData.firstName,
                    lastName: playerData.lastName,
                    nickname: playerData.nickname,
                    realName: playerData.realName,
                    avatarUrl: playerData.avatarUrl,
                    isRegistered: playerData.isRegistered,
                    lastActive: playerData.lastActive
                }
            });

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', playerData.id);
        res.json({ ok: true });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ ok: false, error: 'Database error' });
    }
});

app.get('/api/players/:id', async (req, res) => {
    try {
        const { db } = require('./server/db.js');
        const { userProfiles } = require('./shared/schema.js');
        const { eq } = require('drizzle-orm');
        
        const [player] = await db.select().from(userProfiles).where(eq(userProfiles.id, req.params.id));
        if (!player) return res.status(404).json({ ok: false, error: 'Player not found' });
        res.json({ ok: true, profile: player });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ ok: false, error: 'Database error' });
    }
});

// –°–æ–∑–¥–∞—ë–º POST endpoint –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å
app.post('/api/events', async (req, res) => {
    const authHeader = req.headers.authorization;
    if (authHeader !== 'Bearer admin-secret') {
        return res.status(401).json({ ok: false, error: 'Unauthorized' });
    }
    
    try {
        const { title, place, address, dateIso, capacity = 12 } = req.body;
        if (!title || !dateIso) {
            return res.status(400).json({ ok: false, error: 'title & dateIso required' });
        }
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏
        const eventDate = new Date(dateIso);
        const dateStr = eventDate.toISOString().split('T')[0]; // YYYY-MM-DD
        const timeStr = eventDate.toTimeString().slice(0, 5); // HH:MM
        
        // –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { db } = require('./server/db.js');
        const { events } = require('./shared/schema.js');
        
        const eventData = {
            title,
            location: place || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            address: address || '',
            date: dateStr,
            time: timeStr,
            capacity,
            createdBy: 'admin' // –í—Ä–µ–º–µ–Ω–Ω–æ hardcode, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–∑ req.body
        };

        const [newEvent] = await db.insert(events).values(eventData).returning();
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –±–∞–∑–µ:', newEvent);
        return res.json({ ok: true, id: newEvent.id, event: newEvent });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –ë–î:', error);
        return res.status(500).json({ ok: false, error: 'Database error' });
    }
});

// GET endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
app.get('/api/events', async (req, res) => {
    try {
        const { db } = require('./server/db.js');
        const { events } = require('./shared/schema.js');
        
        const allEvents = await db.select().from(events).orderBy(events.date);
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã:', allEvents.length);
        return res.json({ ok: true, events: allEvents });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        return res.status(500).json({ ok: false, error: 'Database error' });
    }
});

// GET endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–æ–±—ã—Ç–∏—è
app.get('/api/events/:eventId/registrations', async (req, res) => {
    try {
        const eventId = parseInt(req.params.eventId);
        const { db } = require('./server/db.js');
        const { eventRegistrations } = require('./shared/schema.js');
        const { eq } = require('drizzle-orm');
        
        const registrations = await db.select()
            .from(eventRegistrations)
            .where(eq(eventRegistrations.eventId, eventId));
            
        console.log(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventId}:`, registrations.length);
        return res.json(registrations);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
        return res.status(500).json({ error: 'Database error' });
    }
});

// POST endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç
app.post('/api/send-roles', async (req, res) => {
    try {
        const { players, gameTitle } = req.body;
        
        if (!players || !Array.isArray(players)) {
            return res.status(400).json({ error: 'Invalid players data' });
        }
        
        let sent = 0;
        let errors = 0;
        
        for (const player of players) {
            try {
                if (!player.telegramId || !player.role) continue;
                
                const roleInfo = getRoleInfo(player.role);
                const roleMessage = `üé≠ *${gameTitle || '–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é'}*\n\n` +
                                   `${roleInfo.emoji} *–í–∞—à–∞ —Ä–æ–ª—å: ${roleInfo.name}*\n\n` +
                                   `${roleInfo.description}\n\n` +
                                   `üéØ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–∫–∞–∑–∞–Ω–∏—è–º–∏ –≤–µ–¥—É—â–µ–≥–æ.`;
                
                // –î–ª—è —Ä–æ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                const replicDomain = process.env.REPLIT_DEV_DOMAIN || `127.0.0.1:${PORT}`;
                let imageUrl = null;
                
                if (player.role === 'civilian') {
                    imageUrl = `https://${replicDomain}/assets/civilian_role.png`;
                } else if (player.role === 'mafia') {
                    imageUrl = `https://${replicDomain}/assets/mafia_role.png`;
                } else if (player.role === 'don') {
                    imageUrl = `https://${replicDomain}/assets/don_role.png`;
                } else if (player.role === 'consigliere') {
                    imageUrl = `https://${replicDomain}/assets/consigliere_role.png`;
                } else if (player.role === 'commissar') {
                    imageUrl = `https://${replicDomain}/assets/commissar_role.png`;
                } else if (player.role === 'doctor') {
                    imageUrl = `https://${replicDomain}/assets/doctor_role.png`;
                } else if (player.role === 'lover') {
                    imageUrl = `https://${replicDomain}/assets/lover_role.png`;
                } else if (player.role === 'bomber') {
                    imageUrl = `https://${replicDomain}/assets/bomber_role.png`;
                } else if (player.role === 'kamikaze') {
                    imageUrl = `https://${replicDomain}/assets/kamikaze_role.png`;
                } else if (player.role === 'maniac') {
                    imageUrl = `https://${replicDomain}/assets/maniac_role.png`;
                } else if (player.role === 'werewolf') {
                    imageUrl = `https://${replicDomain}/assets/werewolf_role.png`;
                } else if (player.role === 'jailer') {
                    imageUrl = `https://${replicDomain}/assets/jailer_role.png`;
                }
                
                if (imageUrl) {
                    await bot.telegram.sendPhoto(
                        player.telegramId,
                        imageUrl,
                        {
                            caption: roleMessage,
                            parse_mode: 'Markdown'
                        }
                    );
                } else {
                    await bot.telegram.sendMessage(player.telegramId, roleMessage, { parse_mode: 'Markdown' });
                }
                sent++;
                console.log(`‚úÖ –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–æ–∫—É ${player.name} (${player.telegramId}): ${roleInfo.name}`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
                
            } catch (error) {
                errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É ${player.name}:`, error.message);
            }
        }
        
        console.log(`üìä –†–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: —É—Å–ø–µ—à–Ω–æ ${sent}, –æ—à–∏–±–æ–∫ ${errors}`);
        return res.json({ sent, errors, total: players.length });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–µ–π:', error);
        return res.status(500).json({ error: 'Server error' });
    }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏—Ö Telegram ID
app.post('/api/players/profiles', async (req, res) => {
    try {
        const { userIds } = req.body;
        
        if (!userIds || !Array.isArray(userIds)) {
            return res.status(400).json({ error: 'Invalid userIds data' });
        }
        
        const { db } = require('./server/db.js');
        const { userProfiles } = require('./shared/schema.js');
        const { inArray } = require('drizzle-orm');
        
        const profiles = await db.select({
            id: userProfiles.id,
            username: userProfiles.username,
            nickname: userProfiles.nickname,
            realName: userProfiles.realName,
            avatarUrl: userProfiles.avatarUrl,
            isRegistered: userProfiles.isRegistered,
            gamesPlayed: userProfiles.gamesPlayed
        })
        .from(userProfiles)
        .where(inArray(userProfiles.id, userIds));
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è ${profiles.length} –∏–≥—Ä–æ–∫–æ–≤:`, profiles.map(p => p.nickname || p.username).join(', '));
        return res.json(profiles);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
        return res.status(500).json({ error: 'Database error' });
    }
});

// Helper function –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª—è—Ö
function getRoleInfo(role) {
    const roleMap = {
        'don': { name: '–î–æ–Ω', emoji: 'üëë', description: '–í—ã –ª–∏–¥–µ—Ä –º–∞—Ñ–∏–∏. –ö–æ–º–∞–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ —É—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –Ω–æ—á—å—é.' },
        'mafia': { name: '–ú–∞—Ñ–∏—è', emoji: 'üî´', description: '–í—ã —á–ª–µ–Ω –º–∞—Ñ–∏–∏. –†–∞–±–æ—Ç–∞–π—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.' },
        'consigliere': { name: '–ö–æ–Ω—Å–∏–ª—å–µ—Ä–∏', emoji: 'ü§ù', description: '–í—ã —Å–æ–≤–µ—Ç–Ω–∏–∫ –º–∞—Ñ–∏–∏. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–±–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ).' },
        'commissar': { name: '–ö–æ–º–∏—Å—Å–∞—Ä', emoji: 'üîé', description: '–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é.' },
        'doctor': { name: '–î–æ–∫—Ç–æ—Ä', emoji: 'üíâ', description: '–í—ã –ª–µ—á–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é. –°–ø–∞—Å–∞–π—Ç–µ –∂–∏–∑–Ω–∏ –∏ –∑–∞—â–∏—â–∞–π—Ç–µ –º–∏—Ä–Ω—ã—Ö.' },
        'lover': { name: '–õ—é–±–æ–≤–Ω–∏—Ü–∞', emoji: 'üíã', description: '–í—ã –±–ª–æ–∫–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é, –Ω–µ –¥–∞–≤–∞—è –∏–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.' },
        'bomber': { name: '–ü–æ–¥—Ä—ã–≤–Ω–∏–∫', emoji: 'üí£', description: '–í—ã –º–∏–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–æ–∫–æ–≤. –ü—Ä–∏ –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏ –≤–∑–æ—Ä–≤–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–ª—å.' },
        'jailer': { name: '–¢—é—Ä–µ–º—â–∏–∫', emoji: 'üîí', description: '–í—ã —Å–∞–∂–∞–µ—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç—é—Ä—å–º—É –Ω–æ—á—å—é, –∑–∞—â–∏—â–∞—è –∏ –±–ª–æ–∫–∏—Ä—É—è –∏—Ö.' },
        'civilian': { name: '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', emoji: '‚¨úÔ∏è', description: '–í—ã –æ–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞. –ì–æ–ª–æ—Å—É–π—Ç–µ –¥–Ω–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é.' },
        'maniac': { name: '–ú–∞–Ω—å—è–∫', emoji: 'üî™', description: '–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Å–∞–º –∑–∞ —Å–µ–±—è. –£–±–∏–≤–∞–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é.' },
        'kamikaze': { name: '–ö–∞–º–∏–∫–∞–¥–∑–µ', emoji: 'üí•', description: '–ü—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –∑–∞ –≤–∞—Å –¥–Ω–µ–º –≤—ã –≤–∑—Ä—ã–≤–∞–µ—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ).' },
        'werewolf': { name: '–û–±–æ—Ä–æ—Ç–µ–Ω—å', emoji: 'üê∫', description: '–í—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–æ–ª—å. –£–±–∏–≤–∞–µ—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.' },
        'sheriff': { name: '–ö–æ–º–∏—Å—Å–∞—Ä', emoji: 'üîé', description: '–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é.' }
    };
    
    return roleMap[role] || { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å', emoji: '‚ùì', description: '–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.' };
}

// API endpoints
console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –º–æ–¥—É–ª—è...');
app.use(apiApp); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, —Ç–∞–∫ –∫–∞–∫ –≤ api.js —É–∂–µ –µ—Å—Ç—å /api
console.log('‚úÖ API –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('.'));
app.use('/balagan', express.static(path.join(__dirname, 'mafia-balagan')));
app.use('/assets', express.static(path.join(__dirname, 'server/assets')));

app.get('/', (req, res) => {
  res.redirect('/balagan');
});

// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ (–∏–∑ index.js)
let events = {}; // Store events by ID
let userProfiles = {}; // Store user profiles by Telegram ID
let eventRegistrations = {}; // Store registrations by event ID
let adminId = process.env.ADMIN_TELEGRAM_ID ? process.env.ADMIN_TELEGRAM_ID.toString() : null;
let eventIdCounter = 1; // Auto-incrementing event ID

// Helper function to get or create user profile
function getUserProfile(userId, username) {
    if (!userProfiles[userId]) {
        userProfiles[userId] = {
            id: userId,
            username: username || 'Unknown',
            nickname: null,
            gamesPlayed: 0,
            wins: 0,
            losses: 0
        };
    }
    if (username && userProfiles[userId].username !== username) {
        userProfiles[userId].username = username;
    }
    return userProfiles[userId];
}

// Start command - –∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const username = ctx.from.username;
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
        const response = await fetch(`${BASE_URL}/api/players/upsert`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer bot-secret'
            },
            body: JSON.stringify({
                telegramId: userId,
                username: username,
                firstName: firstName,
                lastName: lastName,
                nickname: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                realName: null,
                avatarUrl: null
            })
        });
        
        if (response.ok) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${userId}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    
    getUserProfile(userId, username);
    
    const isAdmin = userId.toString() === adminId;
    const buttons = [
        [Markup.button.callback('üé≠ –ê—Ñ–∏—à–∏', 'show_events')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'show_profile')]
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try {
        const profileResponse = await fetch(`${BASE_URL}/api/players/${userId}`, {
            headers: { 'Authorization': 'Bearer bot-secret' }
        });
        
        if (profileResponse.ok) {
            const profileData = await profileResponse.json();
            const profile = profileData.ok ? profileData.profile : null;
            
            if (!profile || !profile.isRegistered) {
                buttons.push([Markup.button.callback('üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'start_registration')]);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        buttons.push([Markup.button.callback('üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'start_registration')]);
    }
    
    if (isAdmin) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTPS URL –¥–ª—è Telegram Web App
        const domain = process.env.REPLIT_DEV_DOMAIN;
        if (domain) {
            const balaganUrl = `https://${domain}/balagan/`;
            buttons.push([Markup.button.webApp('üéÆ –ù–∞—à–∞ –ú–∞—Ñ–∏—è', balaganUrl)]);
        }
        buttons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
    }
    
    const keyboard = Markup.inlineKeyboard(buttons);
    const welcomeText = `üç∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± "–ù–∞—à–∞ –º–∞—Ñ–∏—è" üé≠

–ó–¥–µ—Å—å –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∑–∞ –ª—é–±–∏–º–æ–π –∏–≥—Ä–æ–π, –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ª—é–¥–µ–π.

üìÖ –ö–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ:
1Ô∏è‚É£ –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –∏–≥—Ä—É.
2Ô∏è‚É£ –ü—Ä–∏—Ö–æ–¥–∏ –≤ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–µ–±—è –∂–¥—ë—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ç–µ–ø–ª–∞ –∏ –¥—Ä—É–∂–±—ã.
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é —Ä–æ–ª—å –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—é–∂–µ—Ç.
4Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–º–µ—Ö–æ–º, —ç–º–æ—Ü–∏—è–º–∏ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –ø–∞—Ä—Ç–∏–∏.

‚ú® –ü–æ—á–µ–º—É —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è:
\t‚Ä¢\t–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.
\t‚Ä¢\t–ö—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ —Å –≤–∫—É—Å–Ω–æ–π –∫—É—Ö–Ω–µ–π.
\t‚Ä¢\t–õ—ë–≥–∫–∞—è, –Ω–µ–Ω–∞–ø—Ä—è–∂–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.
\t‚Ä¢\t–Ø—Ä–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–Ω—è—Ç—Å—è.

üíå –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" –∏ –±—Ä–æ–Ω–∏—Ä—É–π —Å–≤–æ—ë –º–µ—Å—Ç–æ –∑–∞ —Å—Ç–æ–ª–æ–º!`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    const replicDomain = process.env.REPLIT_DEV_DOMAIN;
    if (replicDomain) {
        const imageUrl = `https://${replicDomain}/assets/welcome_image.jpeg`;
        await ctx.replyWithPhoto(imageUrl, {
            caption: welcomeText,
            reply_markup: keyboard.reply_markup
        });
    } else {
        ctx.reply(welcomeText, keyboard);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ wizard
bot.command('register', async (ctx) => {
    const userId = ctx.from.id;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const response = await fetch(`${BASE_URL}/api/players/${userId}`, {
            headers: { 'Authorization': 'Bearer bot-secret' }
        });
        
        if (response.ok) {
            const data = await response.json();
            const profile = data.ok ? data.profile : null;
            
            if (profile && profile.isRegistered) {
                const keyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'show_profile')],
                    [Markup.button.callback('üé≠ –°–æ–±—ã—Ç–∏—è', 'show_events')],
                    [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
                ]);
                
                ctx.reply(
                    `‚úÖ –í—ã —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
                    `üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º: ${profile.nickname}\n` +
                    `üë§ –ò–º—è: ${profile.realName}\n` +
                    `üì∏ –ê–≤–∞—Ç–∞—Ä: ${profile.avatarUrl ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ—Ç'}\n\n` +
                    `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö.`,
                    keyboard
                );
                return;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞–µ–º wizard
        ctx.scene.enter('registration');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        ctx.scene.enter('registration');
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.action('show_events', async (ctx) => {
    try {
        const response = await fetch(`${BASE_URL}/api/events`);
        const data = await response.json();
        const events = data.ok ? (data.events || []) : [];
        
        if (events.length === 0) {
            const messageText = 'üé≠ –ê—Ñ–∏—à–∏ —Å–æ–±—ã—Ç–∏–π\n\nüìù –°–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n\nüí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /create_event';
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'show_events')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
            ]);
            await ctx.editMessageText(messageText, keyboard);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –∞—Ñ–∏—à—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const event = events[0];
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ:', event);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ
        const registrationsResponse = await fetch(`${BASE_URL}/api/events/${event.id}/registrations`);
        const regData = await registrationsResponse.json();
        const registrations = regData.ok ? (regData.registrations || []) : [];
        const registeredCount = registrations.reduce((sum, reg) => sum + (reg.playerCount || 1), 0);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
        const eventDate = new Date(`${event.date} ${event.time}`);
        const options = { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        };
        const formattedDate = eventDate.toLocaleDateString('ru-RU', options);
        
        // –ù–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∞—Ñ–∏—à–∏
        const messageText = `üé≠ –ë–ª–∏–∂–∞–π—à–∞—è –∏–≥—Ä–∞ –∫–ª—É–±–∞ "–ù–∞—à–∞ –º–∞—Ñ–∏—è" üç∑

üìÖ –î–∞—Ç–∞: ${formattedDate}
üïñ –í—Ä–µ–º—è: ${event.time}
üìç –ú–µ—Å—Ç–æ: ${event.location}

üî• –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
\t‚Ä¢\t–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
\t‚Ä¢\t–í–∫—É—Å–Ω–∞—è –µ–¥–∞ –∏ —É—é—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞
\t‚Ä¢\t–°–º–µ—Ö, –∏–Ω—Ç—Ä–∏–≥–∏ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã
\t‚Ä¢\t–ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏

üéü –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!

üíå –ñ–º–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", –±—Ä–æ–Ω–∏—Ä—É–π —Å–≤–æ—ë –º–µ—Å—Ç–æ –∑–∞ —Å—Ç–æ–ª–æ–º –∏ –ø—Ä–∏—Ö–æ–¥–∏ —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫—É!`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
        const userId = ctx.from.id.toString();
        const isUserRegistered = registrations.some(reg => reg.userId === userId);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const keyboardButtons = [];
        if (isUserRegistered) {
            keyboardButtons.push([Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', `cancel_event_${event.id}`)]);
        } else {
            keyboardButtons.push([Markup.button.callback('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `register_event_${event.id}`)]);
        }
        
        keyboardButtons.push([Markup.button.callback(`üë• –ò–≥—Ä–æ–∫–∏ (${registeredCount}/${event.capacity})`, `show_players_${event.id}`)]);
        keyboardButtons.push([Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', 'next_event')]);
        keyboardButtons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_menu')]);
        
        const keyboard = Markup.inlineKeyboard(keyboardButtons);
        
        console.log('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ñ–∏—à—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∞—Ñ–∏—à—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        const replicDomain = process.env.REPLIT_DEV_DOMAIN;
        if (replicDomain) {
            const imageUrl = `https://${replicDomain}/assets/event_poster.png`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (ctx.callbackQuery?.message?.photo) {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try {
                    await ctx.deleteMessage();
                    await ctx.replyWithPhoto(imageUrl, {
                        caption: messageText,
                        reply_markup: keyboard.reply_markup
                    });
                } catch (deleteError) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await ctx.replyWithPhoto(imageUrl, {
                        caption: messageText,
                        reply_markup: keyboard.reply_markup
                    });
                }
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                try {
                    await ctx.deleteMessage();
                    await ctx.replyWithPhoto(imageUrl, {
                        caption: messageText,
                        reply_markup: keyboard.reply_markup
                    });
                } catch (deleteError) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await ctx.replyWithPhoto(imageUrl, {
                        caption: messageText,
                        reply_markup: keyboard.reply_markup
                    });
                }
            }
        } else {
            // Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–µ–Ω–∞
            if (ctx.callbackQuery?.message?.photo) {
                try {
                    await ctx.deleteMessage();
                    await ctx.reply(messageText, keyboard);
                } catch (deleteError) {
                    await ctx.reply(messageText, keyboard);
                }
            } else {
                await ctx.editMessageText(messageText, keyboard);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const errorText = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        if (ctx.callbackQuery?.message?.photo) {
            try {
                await ctx.deleteMessage();
                await ctx.reply(errorText, keyboard);
            } catch (deleteError) {
                await ctx.reply(errorText, keyboard);
            }
        } else {
            await ctx.editMessageText(errorText, keyboard);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞—Ñ–∏—à
bot.action(/register_event_(\d+)/, async (ctx) => {
    const eventId = parseInt(ctx.match[1]);
    const userId = ctx.from.id.toString();
    const username = ctx.from.username || ctx.from.first_name || '–ò–≥—Ä–æ–∫';
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
        const { db } = require('./server/db.js');
        const { events, eventRegistrations } = require('./shared/schema.js');
        const { eq, and } = require('drizzle-orm');
        
        const [event] = await db.select().from(events).where(eq(events.id, eventId));
        if (!event) {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
            ]);
            await ctx.editMessageText(`‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, keyboard);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const [existingReg] = await db.select()
            .from(eventRegistrations)
            .where(and(
                eq(eventRegistrations.eventId, eventId),
                eq(eventRegistrations.userId, userId)
            ));
            
        if (existingReg) {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', `unregister_event_${eventId}`)],
                [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
            ]);
            await ctx.editMessageText(`‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ "${event.title}"\n\nüìÖ ${event.date} –≤ ${event.time}\nüìç ${event.location}`, keyboard);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
        const registrationsCount = await db.select()
            .from(eventRegistrations)
            .where(eq(eventRegistrations.eventId, eventId));
            
        const totalRegistered = registrationsCount.reduce((sum, reg) => sum + (reg.playerCount || 1), 0);
        
        if (totalRegistered >= event.capacity) {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
            ]);
            await ctx.editMessageText(`‚ùå –í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã\n\n"${event.title}"\n–°–≤–æ–±–æ–¥–Ω–æ: 0/${event.capacity} –º–µ—Å—Ç`, keyboard);
            return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.insert(eventRegistrations).values({
            eventId: eventId,
            userId: userId,
            username: username,
            playerCount: 1
        });
        
        const newTotal = totalRegistered + 1;
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', `show_players_${eventId}`)],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', `unregister_event_${eventId}`)],
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        
        await ctx.editMessageText(
            `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n` +
            `üé≠ "${event.title}"\n` +
            `üìÖ ${event.date} –≤ ${event.time}\n` +
            `üìç ${event.location}\n` +
            `üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${newTotal}/${event.capacity}`,
            keyboard
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`, keyboard);
    }
});

bot.action(/show_players_(\d+)/, async (ctx) => {
    const eventId = parseInt(ctx.match[1]);
    
    try {
        const { db } = require('./server/db.js');
        const { events, eventRegistrations } = require('./shared/schema.js');
        const { eq } = require('drizzle-orm');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const [event] = await db.select().from(events).where(eq(events.id, eventId));
        if (!event) {
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
            ]);
            await ctx.editMessageText(`‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, keyboard);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        const registrations = await db.select()
            .from(eventRegistrations)
            .where(eq(eventRegistrations.eventId, eventId));
            
        let messageText = `üë• –ò–≥—Ä–æ–∫–∏ –Ω–∞ "${event.title}"\n`;
        messageText += `üìÖ ${event.date} –≤ ${event.time}\n\n`;
        
        if (registrations.length === 0) {
            messageText += `üìù –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n`;
        } else {
            const totalPlayers = registrations.reduce((sum, reg) => sum + (reg.playerCount || 1), 0);
            messageText += `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${totalPlayers}/${event.capacity}\n\n`;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –∏ –∏–º–µ–Ω —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            for (let i = 0; i < registrations.length; i++) {
                const reg = registrations[i];
                try {
                    const profileResponse = await fetch(`${BASE_URL}/api/players/${reg.userId}`, {
                        headers: { 'Authorization': 'Bearer bot-secret' }
                    });
                    const profileData = await profileResponse.json();
                    const profile = profileData.ok ? profileData.profile : null;
                    
                    let displayName;
                    if (profile && profile.nickname && profile.realName) {
                        // –§–æ—Ä–º–∞—Ç: –ø—Å–µ–≤–¥–æ–Ω–∏–º (–∏–º—è) —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram
                        displayName = `[${profile.nickname} (${profile.realName})](tg://user?id=${reg.userId})`;
                    } else if (profile && profile.nickname) {
                        // –¢–æ–ª—å–∫–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å —Å—Å—ã–ª–∫–æ–π
                        displayName = `[${profile.nickname}](tg://user?id=${reg.userId})`;
                    } else if (profile && profile.realName) {
                        // –¢–æ–ª—å–∫–æ –∏–º—è —Å —Å—Å—ã–ª–∫–æ–π
                        displayName = `[${profile.realName}](tg://user?id=${reg.userId})`;
                    } else if (reg.username) {
                        // Fallback –∫ username —Å —Å—Å—ã–ª–∫–æ–π —á–µ—Ä–µ–∑ @username –µ—Å–ª–∏ –µ—Å—Ç—å
                        displayName = `[@${reg.username}](tg://user?id=${reg.userId})`;
                    } else {
                        // –ö—Ä–∞–π–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ "–ò–≥—Ä–æ–∫"
                        displayName = `[–ò–≥—Ä–æ–∫](tg://user?id=${reg.userId})`;
                    }
                    
                    messageText += `${i + 1}. ${displayName}\n`;
                } catch (profileError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${reg.userId}:`, profileError);
                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º username —Å —Å—Å—ã–ª–∫–æ–π
                    const fallbackName = reg.username ? `@${reg.username}` : '–ò–≥—Ä–æ–∫';
                    messageText += `${i + 1}. [${fallbackName}](tg://user?id=${reg.userId})\n`;
                }
            }
        }
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `register_event_${eventId}`)],
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (ctx.callbackQuery?.message?.photo) {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            try {
                await ctx.deleteMessage();
                await ctx.reply(messageText, {
                    ...keyboard,
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                });
            } catch (deleteError) {
                // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.reply(messageText, {
                    ...keyboard,
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                });
            }
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await ctx.editMessageText(messageText, {
                ...keyboard,
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        const errorText = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤';
        if (ctx.callbackQuery?.message?.photo) {
            try {
                await ctx.deleteMessage();
                await ctx.reply(errorText, keyboard);
            } catch (deleteError) {
                await ctx.reply(errorText, keyboard);
            }
        } else {
            await ctx.editMessageText(errorText, keyboard);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∞—Ñ–∏—à–∏
bot.action(/cancel_event_(\d+)/, async (ctx) => {
    const eventId = parseInt(ctx.match[1]);
    const userId = ctx.from.id.toString();
    
    try {
        const { db } = require('./server/db.js');
        const { events, eventRegistrations } = require('./shared/schema.js');
        const { eq, and } = require('drizzle-orm');
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await db.delete(eventRegistrations)
            .where(and(
                eq(eventRegistrations.eventId, eventId),
                eq(eventRegistrations.userId, userId)
            ));
        
        ctx.answerCbQuery('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ñ–∏—à–µ
        const response = await fetch(`${BASE_URL}/api/events`);
        const data = await response.json();
        const events_list = data.ok ? (data.events || []) : [];
        
        if (events_list.length > 0) {
            // –í—ã–∑—ã–≤–∞–µ–º show_events –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ñ–∏—à–∏
            ctx.callbackQuery.data = 'show_events';
            return bot.handleUpdate({ 
                update_id: ctx.update.update_id, 
                callback_query: ctx.callbackQuery 
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.action(/unregister_event_(\d+)/, async (ctx) => {
    const eventId = parseInt(ctx.match[1]);
    const userId = ctx.from.id.toString();
    
    try {
        const { db } = require('./server/db.js');
        const { events, eventRegistrations } = require('./shared/schema.js');
        const { eq, and } = require('drizzle-orm');
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await db.delete(eventRegistrations)
            .where(and(
                eq(eventRegistrations.eventId, eventId),
                eq(eventRegistrations.userId, userId)
            ));
        
        const [event] = await db.select().from(events).where(eq(events.id, eventId));
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞', `register_event_${eventId}`)],
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        
        await ctx.editMessageText(
            `‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n` +
            `üé≠ "${event?.title || '–°–æ–±—ã—Ç–∏–µ'}"\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è`,
            keyboard
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ö –∞—Ñ–∏—à–∞–º', 'show_events')]
        ]);
        await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`, keyboard);
    }
});

bot.action('next_event', async (ctx) => {
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π
    await ctx.answerCbQuery('üí° –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º scene.enter, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —Å—Ü–µ–Ω–∞
});

// –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
bot.action('show_profile', async (ctx) => {
    const userId = ctx.from.id;
    try {
        const response = await fetch(`${BASE_URL}/api/players/${userId}`, {
            headers: {
                'Authorization': 'Bearer bot-secret'
            }
        });
        
        const data = await response.json();
        const profile = data.ok ? data.profile : null;
        
        if (profile && profile.isRegistered) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (profile.avatarUrl) {
                try {
                    console.log(`üñºÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ —Å file_id: ${profile.avatarUrl}`);
                    
                    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
                    if (profile.avatarUrl.startsWith('http')) {
                        // –ï—Å–ª–∏ —ç—Ç–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                        await ctx.replyWithPhoto({ url: profile.avatarUrl }, {
                            caption: `üë§ **${profile.nickname}**\n\nüí´ ${profile.realName}\nüéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${profile.gamesPlayed || 0}`,
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]])
                        });
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–æ file_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                        await ctx.replyWithPhoto(profile.avatarUrl, {
                            caption: `üë§ **${profile.nickname}**\n\nüí´ ${profile.realName}\nüéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${profile.gamesPlayed || 0}`,
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]])
                        });
                    }
                    console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                    return;
                } catch (photoError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', photoError.message);
                    console.error('–ê–≤–∞—Ç–∞—Ä –¥–∞–Ω–Ω—ã–µ:', profile.avatarUrl);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π file_id, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–ª —Ñ–æ—Ç–æ
                    if (ctx.chat && ctx.chat.id === userId) {
                        console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞');
                        ctx.reply('üì∏ –ö–∞–∂–µ—Ç—Å—è, –≤–∞—à –∞–≤–∞—Ç–∞—Ä —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:', 
                            Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]]));
                        return;
                    }
                }
            }
            
            // –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const messageText = `üë§ **${profile.nickname}**\n\n` +
                               `üí´ ${profile.realName}\n` +
                               `üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${profile.gamesPlayed || 0}`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
            ]);
            ctx.editMessageText(messageText, { keyboard, parse_mode: 'Markdown' });
            
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
            const messageText = 'üìù **–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n' +
                               'üí° –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π';
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìù –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'start_registration')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
            ]);
            ctx.editMessageText(messageText, { keyboard, parse_mode: 'Markdown' });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]);
        ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', keyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
bot.action('start_registration', (ctx) => {
    ctx.scene.enter('registration');
});

bot.action('admin_panel', (ctx) => {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 'system_stats')],
        [Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', 'players_list')],
        [Markup.button.callback('üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã', 'active_games')],
        [Markup.button.callback('üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'create_event_help')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
    ]);
    ctx.editMessageText('‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { keyboard, parse_mode: 'Markdown' });
});

bot.action('create_event_help', (ctx) => {
    ctx.editMessageText(`üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/create_event\` –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

\`/create_event
–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
YYYY-MM-DD
HH:MM
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç\`

**–ü—Ä–∏–º–µ—Ä:**
\`/create_event
–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ú–∞—Ñ–∏—è
–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ
—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 123, –ú–æ—Å–∫–≤–∞
2025-08-15
19:00
12\`

üí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤.`, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞', 'admin_panel')]
        ])
    });
});

bot.action('system_stats', async (ctx) => {
    try {
        const [playersResponse, eventsResponse, gamesResponse] = await Promise.all([
            fetch(`${BASE_URL}/api/players`, { headers: { 'Authorization': 'Bearer admin' } }),
            fetch(`${BASE_URL}/api/events`, { headers: { 'Authorization': 'Bearer admin' } }),
            fetch(`${BASE_URL}/api/games/active`, { headers: { 'Authorization': 'Bearer admin' } })
        ]);
        
        const playersData = await playersResponse.json();
        const eventsData = await eventsResponse.json();
        const gamesData = await gamesResponse.json();
        
        const playersCount = playersData.ok ? playersData.players?.length || 0 : 0;
        const eventsCount = eventsData.ok ? eventsData.events?.length || 0 : 0;
        const hasActiveGame = gamesData.ok && gamesData.data;
        
        const messageText = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n` +
                          `üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${playersCount}\n` +
                          `üé≠ –°–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${eventsCount}\n` +
                          `üéÆ –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞: ${hasActiveGame ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n` +
                          `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleTimeString('ru-RU')}`;
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'system_stats')],
            [Markup.button.callback('üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞', 'admin_panel')]
        ]);
        ctx.editMessageText(messageText, { keyboard, parse_mode: 'Markdown' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞', 'admin_panel')]
        ]);
        ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', keyboard);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('create_event', async (ctx) => {
    const userId = ctx.from.id.toString();
    const adminId = process.env.ADMIN_TELEGRAM_ID;
    
    console.log(`üîç Admin check: User ID = ${userId}, Admin ID = ${adminId}`);
    
    if (userId !== adminId) {
        ctx.reply(`‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è!\n\nüÜî –í–∞—à ID: ${userId}\nüëë –ê–¥–º–∏–Ω ID: ${adminId || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π`);
        return;
    }
    
    const args = ctx.message.text.split('\n').slice(1); // Skip the command line
    
    if (args.length < 6) {
        ctx.reply(`‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
/create_event
–ù–∞–∑–≤–∞–Ω–∏–µ
–ú–µ—Å—Ç–æ
–ê–¥—Ä–µ—Å
–î–∞—Ç–∞ (YYYY-MM-DD)
–í—Ä–µ–º—è (HH:MM)
–ö–æ–ª-–≤–æ –º–µ—Å—Ç

–ü—Ä–∏–º–µ—Ä:
/create_event
–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ú–∞—Ñ–∏—è
–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ
—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 123, –ú–æ—Å–∫–≤–∞
2025-08-15
19:00
12`);
        return;
    }
    
    const [title, location, address, date, time, capacity] = args;
    
    // Validate date format
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(date)) {
        ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è –¥–∞—Ç—ã!');
        return;
    }
    
    // Validate time format
    const timeRegex = /^\d{2}:\d{2}$/;
    if (!timeRegex.test(time)) {
        ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏!');
        return;
    }
    
    // Validate capacity
    const capacityNum = parseInt(capacity);
    if (isNaN(capacityNum) || capacityNum <= 0) {
        ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!');
        return;
    }
    
    try {
        // Create event via API
        const response = await fetch(`${BASE_URL}/api/events`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer admin-secret'
            },
            body: JSON.stringify({
                title: title.trim(),
                place: location.trim(),
                address: address.trim(),
                dateIso: `${date.trim()}T${time.trim()}:00.000Z`,
                capacity: capacityNum
            })
        });
        
        const result = await response.json();
        
        if (result.ok && result.id) {
            ctx.reply(`‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!
üéØ **${title.trim()}**
üìç ${location.trim()}
üè† ${address.trim()}
üìÖ ${date.trim()} –≤ ${time.trim()}
üë• –ú–µ—Å—Ç: ${capacityNum} –∏–≥—Ä–æ–∫–æ–≤
üÜî ID —Å–æ–±—ã—Ç–∏—è: ${result.id}

üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üé≠ –°–æ–±—ã—Ç–∏—è"`, { parse_mode: 'Markdown' });
        } else {
            console.error('API –æ—Ç–≤–µ—Ç:', result);
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
});

bot.action('back_to_menu', async (ctx) => {
    const isAdmin = ctx.from.id.toString() === adminId;
    const firstName = ctx.from.first_name || '';
    
    const buttons = [
        [Markup.button.callback('üé≠ –ê—Ñ–∏—à–∏', 'show_events')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'show_profile')]
    ];
    
    if (isAdmin) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTPS URL –¥–ª—è Telegram Web App
        const domain = process.env.REPLIT_DEV_DOMAIN;
        if (domain) {
            const balaganUrl = `https://${domain}/balagan/`;
            buttons.push([Markup.button.webApp('üéÆ –ù–∞—à–∞ –ú–∞—Ñ–∏—è', balaganUrl)]);
        }
        buttons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
    }
    
    const keyboard = Markup.inlineKeyboard(buttons);
    const welcomeText = isAdmin 
        ? `üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\nüé≠ –°–∏—Å—Ç–µ–º–∞ "–ù–∞—à–∞ –ú–∞—Ñ–∏—è" –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n\n‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∏–≥—Ä–∞–º–∏:`
        : `üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ù–∞—à–∞ –ú–∞—Ñ–∏—è", ${firstName}!\n\nüéÆ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö –ú–∞—Ñ–∏—è\n‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\nüîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
        if (ctx.callbackQuery?.message?.photo || ctx.callbackQuery?.message?.caption) {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try {
                await ctx.deleteMessage();
                await ctx.reply(welcomeText, keyboard);
            } catch (deleteError) {
                // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.reply(welcomeText, keyboard);
            }
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await ctx.editMessageText(welcomeText, keyboard);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ back_to_menu:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(welcomeText, keyboard);
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('‚úÖ Telegram bot connected successfully!'))
  .catch(err => console.error('‚ùå Bot connection failed:', err));

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üåê Web server running on port ${PORT}`);
  console.log(`üîó Web App URL: ${process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}/` : `http://localhost:${PORT}/`}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
setupWebSocket(server);

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));