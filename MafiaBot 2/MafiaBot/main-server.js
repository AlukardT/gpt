const express = require('express');
const path = require('path');
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { app: apiApp, setupWebSocket } = require('./server/api.js');
require('dotenv').config();

const PORT = process.env.PORT || 5000;
const BASE_URL = `http://127.0.0.1:${PORT}`;

// –°–æ–∑–¥–∞–µ–º wizard —Å—Ü–µ–Ω—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationWizard = new Scenes.WizardScene(
    'registration',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
    async (ctx) => {
        ctx.reply('üìù –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\nüè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—å1—å—å1]-/-/3{4, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –ú–∞—Ñ–∏—é:');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–º–µ–Ω–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º)');
            return;
        }
        
        const nickname = ctx.message.text.trim().slice(0, 30);
        if (nickname.length < 2) {
            ctx.reply('‚ùå –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        
        ctx.wizard.state.nickname = nickname;
        ctx.reply(`‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º: "${nickname}"\n\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:`);
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    async (ctx) => {
        if (!ctx.message?.text) {
            ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–≤–∞—à–µ –∏–º—è)');
            return;
        }
        
        const realName = ctx.message.text.trim().slice(0, 50);
        if (realName.length < 2) {
            ctx.reply('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
        }
        
        ctx.wizard.state.realName = realName;
        ctx.reply(`‚úÖ –ò–º—è: "${realName}"\n\nüì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:`);
        return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async (ctx) => {
        const photos = ctx.message?.photo;
        if (!photos || !photos.length) {
            ctx.reply('‚ùå –ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ —Ñ–∞–π–ª, –∞ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ):');
            return;
        }
        
        try {
            // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const photo = photos[photos.length - 1];
            const fileId = photo.file_id;
            console.log(`üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å ID: ${fileId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            const fileLink = await ctx.telegram.getFileLink(fileId);
            console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: ${fileLink.href}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const userId = ctx.from.id;
            const username = ctx.from.username;
            const firstName = ctx.from.first_name || '';
            const lastName = ctx.from.last_name || '';
            
            const response = await fetch(`${BASE_URL}/api/players/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer bot-secret'
                },
                body: JSON.stringify({
                    telegramId: userId,
                    username: username,
                    firstName: firstName,
                    lastName: lastName,
                    nickname: ctx.wizard.state.nickname,
                    realName: ctx.wizard.state.realName,
                    avatarUrl: fileLink.href // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                })
            });
            
            if (response.ok) {
                const keyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'show_profile')],
                    [Markup.button.callback('üé≠ –°–æ–±—ã—Ç–∏—è', 'show_events')],
                    [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]
                ]);
                
                ctx.reply(
                    `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                    `üè∑Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º: ${ctx.wizard.state.nickname}\n` +
                    `üë§ –ò–º—è: ${ctx.wizard.state.realName}\n` +
                    `üì∏ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω\n\n` +
                    `‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö –ú–∞—Ñ–∏—è!`,
                    keyboard
                );
                
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${userId}) –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`);
            } else {
                ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        
        return ctx.scene.leave();
    }
);

// –°–æ–∑–¥–∞–µ–º stage –¥–ª—è —Å—Ü–µ–Ω
const stage = new Scenes.Stage([registrationWizard]);

// Initialize bot with token from environment variables and middleware
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
bot.use(stage.middleware());

// Initialize Express app for web server  
const app = express();
// PORT —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîÑ Starting main server with API integration...');
console.log('üîë Bot token exists:', !!process.env.BOT_TOKEN);
console.log('üë§ Admin ID exists:', !!process.env.ADMIN_TELEGRAM_ID);
console.log('üëë Admin ID value:', process.env.ADMIN_TELEGRAM_ID);

// –î–æ–±–∞–≤–ª—è–µ–º express.json middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());

// Health check endpoint for Render
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –£–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ API (/api/players/register, /api/players/:id, /api/events, /api/events GET, /api/events/:eventId/registrations)

// –û—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ server/api.js
// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏—Ö Telegram ID
app.post('/api/players/profiles', async (req, res) => {
    try {
        const { userIds } = req.body;
        if (!Array.isArray(userIds) || userIds.length === 0) {
            return res.status(400).json({ ok: false, error: 'userIds array required' });
        }
        const { db } = require('./server/db.js');
        const { userProfiles } = require('./shared/schema.js');
        const { inArray } = require('drizzle-orm');
        const users = await db.select().from(userProfiles).where(inArray(userProfiles.id, userIds.map(String)));
        res.json({ ok: true, profiles: users });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
        res.status(500).json({ ok: false, error: 'Database error' });
    }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use('/balagan', express.static(path.join(__dirname, 'mafia-balagan')));
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('‚úÖ Telegram bot connected successfully!'))
  .catch(err => console.error('‚ùå Bot connection failed:', err));

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üåê Web server running on port ${PORT}`);
  console.log(`üîó Web App URL: ${process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}/` : `http://localhost:${PORT}/`}`);
});

// API endpoints
console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –º–æ–¥—É–ª—è...');
app.use(apiApp); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, —Ç–∞–∫ –∫–∞–∫ –≤ api.js —É–∂–µ –µ—Å—Ç—å /api
console.log('‚úÖ API –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
setupWebSocket(server);

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));