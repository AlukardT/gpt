import { Telegraf, Markup, session } from 'telegraf';
import dotenv from 'dotenv';
import { stateStore } from './game-engine/stateStore.js';

dotenv.config();

let botInstance = null;

const adminId = process.env.ADMIN_TELEGRAM_ID ? Number(process.env.ADMIN_TELEGRAM_ID) : null;

function isAdmin(userId) { return adminId && Number(userId) === adminId; }

function escapeHtml(s) {
	return String(s || '')
		.replace(/&/g, '&amp;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
		.replace(/"/g, '&quot;')
		.replace(/'/g, '&#039;');
}

function formatEventCard(evt) {
	const d = new Date(evt.startsAt);
	return [
		'üé≠ –ú–∞—Ñ–∏—è ‚Äî –±–ª–∏–∂–∞–π—à–∞—è –∏–≥—Ä–∞!',
		`üìÖ –î–∞—Ç–∞: ${d.toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' })}.`,
		`üïñ –í—Ä–µ–º—è: ${d.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`,
		`üìç –ú–µ—Å—Ç–æ: –õ–æ–∫–∞—Ü–∏—è: ¬´${evt.locationTitle || '–ù–∞—à –ë–∞—Ä'}¬ª`,
		`üìç –ê–¥—Ä–µ—Å: –ê–¥—Ä–µ—Å: ${evt.address || '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'}`,
		'',
		'–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏–≥—Ä—É –≤ –ú–∞—Ñ–∏—é!',
		'–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏–Ω—Ç—Ä–∏–≥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ—é–∑–æ–≤ –∏ –≥—Ä–æ–º–∫–∏—Ö —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–π.',
		'',
		'üí° –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:',
		'        ‚Ä¢ –ù–æ–≤—ã–µ —Ä–æ–ª–∏ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã —Å—é–∂–µ—Ç–∞',
		'        ‚Ä¢ –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –º–æ—Ä–µ —ç–º–æ—Ü–∏–π',
		'        ‚Ä¢ –£–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ Telegram',
		'',
		'üéü –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –Ω–∏–∂–µ.',
		'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ‚Äî —É—Å–ø–µ–π –∑–∞–Ω—è—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –∑–∞ —Å—Ç–æ–ª–æ–º!'
	].join('\n');
}

function mainInlineMenu() {
	return Markup.inlineKeyboard([
		[Markup.button.callback('–ê—Ñ–∏—à–∏', 'menu:afisha'), Markup.button.callback('–ü—Ä–æ—Ñ–∏–ª—å', 'menu:profile')]
	]);
}

async function renderEventMessage(ctx, idx = 0) {
	const events = await stateStore.listEventsSorted();
	if (events.length === 0) return ctx.reply('–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤.', mainInlineMenu());
	idx = Math.min(Math.max(0, idx), events.length - 1);
	const evt = events[idx];
	const regCount = (evt.registrations || []).reduce((acc, r) => acc + (Number(r.slots) || 1), 0);
	const isRegistered = await stateStore.isUserRegistered(evt.id, ctx.from.id);
	const signBtn = isRegistered ? Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', `cancel:${evt.id}:${idx}`) : Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É', `signup:1:${evt.id}:${idx}`);
	const playersBtn = Markup.button.callback(`–ò–≥—Ä–æ–∫–∏ (${regCount}/20)`, `players:${evt.id}:${idx}`);
	const nextPrev = [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', `nav:${Math.max(0, idx-1)}`), Markup.button.callback('–í–ø–µ—Ä—ë–¥ ¬ª', `nav:${Math.min(events.length-1, idx+1)}`)];
	await ctx.reply(formatEventCard(evt), Markup.inlineKeyboard([
		[signBtn],
		[nextPrev[0], nextPrev[1]],
		[playersBtn]
	]));
}

export async function ensureBot() {
	if (botInstance) return botInstance;
	const token = process.env.BOT_TOKEN;
	if (!token) {
		console.warn('[bot] BOT_TOKEN not set, bot disabled');
		return null;
	}
	const bot = new Telegraf(token);
	botInstance = bot;
	bot.use(session());

	bot.catch((err) => {
		console.error('[bot] error', err);
	});

	bot.start(async (ctx) => {
		await ctx.reply(' ', Markup.removeKeyboard());
		await ctx.reply(
			'üç∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± "–ù–∞—à–∞ –º–∞—Ñ–∏—è" üé≠\n\n' +
			'–ó–¥–µ—Å—å –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∑–∞ –ª—é–±–∏–º–æ–π –∏–≥—Ä–æ–π, –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ª—é–¥–µ–π.\n\n' +
			'üìÖ –ö–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ:\n' +
			'1Ô∏è‚É£ –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –∏–≥—Ä—É.\n' +
			'2Ô∏è‚É£ –ü—Ä–∏—Ö–æ–¥–∏ –≤ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–µ–±—è –∂–¥—ë—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ç–µ–ø–ª–∞ –∏ –¥—Ä—É–∂–±—ã.\n' +
			'3Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é —Ä–æ–ª—å –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—é–∂–µ—Ç.\n' +
			'4Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–º–µ—Ö–æ–º, —ç–º–æ—Ü–∏—è–º–∏ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –ø–∞—Ä—Ç–∏–∏.\n\n' +
			'‚ú® –ü–æ—á–µ–º—É —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è:\n' +
			' ‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.\n' +
			' ‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ —Å –≤–∫—É—Å–Ω–æ–π –∫—É—Ö–Ω–µ–π.\n' +
			' ‚Ä¢ –õ—ë–≥–∫–∞—è, –Ω–µ–Ω–∞–ø—Ä—è–∂–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.\n' +
			' ‚Ä¢ –Ø—Ä–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–Ω—è—Ç—Å—è.\n\n' +
			'üíå –ñ–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" –∏ –±—Ä–æ–Ω–∏—Ä—É–π —Å–≤–æ—ë –º–µ—Å—Ç–æ –∑–∞ —Å—Ç–æ–ª–æ–º!',
			mainInlineMenu()
		);
	});

	bot.action('menu:afisha', async (ctx) => { await ctx.answerCbQuery(); return renderEventMessage(ctx, 0); });
	bot.action('menu:profile', async (ctx) => {
		await ctx.answerCbQuery();
		const profile = await stateStore.getOrCreateProfile({ userId: ctx.from.id, username: ctx.from.username, firstName: ctx.from.first_name });
		const name = profile.nickname || profile.username || '-';
		await ctx.reply(`–ü—Ä–æ—Ñ–∏–ª—å:\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: ${name}\n–ò–º—è: ${profile.realName || profile.firstName || '-'}\n–ü–æ–±–µ–¥: ${profile.wins || 0}`);
	});

	bot.action(/nav:(\d+)/, async (ctx) => {
		await ctx.answerCbQuery();
		const idx = Number(ctx.match[1]);
		await renderEventMessage(ctx, idx);
	});

	bot.action(/players:([^:]+):(\d+)/, async (ctx) => {
		const eventId = ctx.match[1];
		const idx = Number(ctx.match[2]);
		const evt = await stateStore.getEventById(eventId);
		if (!evt) return ctx.answerCbQuery('–ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
		const lines = (evt.registrations || []).map(r => {
			const profileLink = r.username ? `https://t.me/${r.username}` : null;
			const display = `${r.username ? '@'+r.username : (r.firstName||r.userId)} (${r.firstName||''})`;
			return profileLink ? `<a href="${escapeHtml(profileLink)}">${escapeHtml(display)}</a>` : escapeHtml(display);
		});
		await ctx.replyWithHTML(lines.length ? lines.join('<br/>') : '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ');
		await ctx.answerCbQuery();
	});

	bot.action(/signup:(\d+):([^:]+):(\d+)/, async (ctx) => {
		const count = Number(ctx.match[1]);
		const eventId = ctx.match[2];
		const idx = Number(ctx.match[3]);
		const user = ctx.from;
		const profile = await stateStore.getOrCreateProfile({ userId: user.id, username: user.username, firstName: user.first_name });
		await stateStore.signupForEvent(eventId, profile, count);
		await ctx.answerCbQuery('–ó–∞–ø–∏—Å–∞–Ω—ã');
		await renderEventMessage(ctx, idx);
	});

	bot.action(/cancel:([^:]+):(\d+)/, async (ctx) => {
		const eventId = ctx.match[1];
		const idx = Number(ctx.match[2]);
		await stateStore.cancelSignup(eventId, ctx.from.id);
		await ctx.answerCbQuery('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
		await renderEventMessage(ctx, idx);
	});

	bot.command('register', async (ctx) => {
		ctx.session = { step: 'ask_nickname' };
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º:');
	});

	bot.on('text', async (ctx, next) => {
		ctx.session = ctx.session || {};
		if (ctx.session.step === 'ask_nickname') {
			ctx.session.nickname = ctx.message.text.trim();
			ctx.session.step = 'ask_realname';
			return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
		}
		if (ctx.session.step === 'ask_realname') {
			ctx.session.realName = ctx.message.text.trim();
			ctx.session.step = 'ask_photo';
			return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∞–≤–∞—Ç–∞—Ä) –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:');
		}
		return next();
	});

	bot.on('photo', async (ctx, next) => {
		ctx.session = ctx.session || {};
		if (ctx.session.step === 'ask_photo') {
			const file = ctx.message.photo[ctx.message.photo.length - 1];
			const fileId = file.file_id;
			const profile = await stateStore.getOrCreateProfile({ userId: ctx.from.id, username: ctx.from.username, firstName: ctx.from.first_name });
			profile.nickname = ctx.session.nickname;
			profile.realName = ctx.session.realName;
			profile.avatarFileId = fileId;
			await stateStore.saveProfile(profile);
			ctx.session = {};
			await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ');
			return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainInlineMenu());
		}
		return next();
	});

	bot.command('create_event', async (ctx) => {
		if (!isAdmin(ctx.from.id)) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
		const text = ctx.message.text.split(' ').slice(1).join(' ');
		const title = text || `–ò–≥—Ä–∞ ${new Date().toLocaleDateString()}`;
		const startsAt = Date.now() + 24 * 3600 * 1000;
		const event = await stateStore.createEvent({ title, startsAt });
		await ctx.reply(`–°–æ–∑–¥–∞–Ω –∏–≤–µ–Ω—Ç: ${event.title} (id: ${event.id})`);
	});

	bot.command('start_game', async (ctx) => {
		if (!isAdmin(ctx.from.id)) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
		const parts = ctx.message.text.trim().split(/\s+/);
		const id = parts[1];
		const session = await stateStore.startSessionFromEvent(id);
		if (!session) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É');
		await ctx.reply(`–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ò–≥—Ä–æ–∫–æ–≤ –∑–∞ —Å—Ç–æ–ª–æ–º: ${session.players.length}`);
	});

	bot.command('send_roles', async (ctx) => {
		if (!isAdmin(ctx.from.id)) return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
		const session = await stateStore.loadLatestSession();
		if (!session) return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
		for (const p of session.players) {
			if (!p.telegramId || !p.role) continue;
			try { await bot.telegram.sendMessage(p.telegramId, `–í–∞—à–∞ —Ä–æ–ª—å: ${p.role}`); } catch (e) { /* ignore */ }
		}
		await ctx.reply('–†–æ–ª–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.');
	});

	try {
		await bot.telegram.deleteWebhook({ drop_pending_updates: true });
	} catch (e) {
		console.warn('[bot] deleteWebhook warning:', e.message);
	}
	await bot.launch();
	console.log('[bot] launched via long polling');
	process.once('SIGINT', () => bot.stop('SIGINT'));
	process.once('SIGTERM', () => bot.stop('SIGTERM'));
	return bot;
}